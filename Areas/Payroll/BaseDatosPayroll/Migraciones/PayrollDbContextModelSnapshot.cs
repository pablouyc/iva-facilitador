// <auto-generated />
using System;
using IvaFacilitador.Data.Payroll;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IvaFacilitador.Migrations
{
    [DbContext(typeof(PayrollDbContext))]
    partial class PayrollDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Colaborador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Funcion")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<decimal>("SalarioBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("EmpresaId", "Cedula")
                        .IsUnique();

                    b.ToTable("Colaborador");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.CuentaContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("QboAccountId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("QboAccountName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("EmpresaId", "SectorId", "Tipo")
                        .IsUnique();

                    b.ToTable("CuentasContables");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Empresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("PayPolicy")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealmId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.HasIndex("RealmId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Horas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nota")
                        .HasMaxLength(240)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PeriodoColaboradorId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PeriodoColaboradorId", "Fecha", "Tipo")
                        .IsUnique();

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Feriado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FactorPago")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "Fecha")
                        .IsUnique();

                    b.ToTable("Feriados");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.PayrollQboToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealmId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "RealmId")
                        .IsUnique();

                    b.ToTable("PayrollQboTokens");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Periodo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Etiqueta")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "FechaInicio", "FechaFin");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("IvaFacilitador.Areas.Payroll.ModelosPayroll.PayrollQboToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PayrollQboTokens");
                });

            modelBuilder.Entity("IvaFacilitador.Areas.Payroll.BaseDatosPayroll.Employee", b =>                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColaboradorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PeriodoId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("PeriodoId", "ColaboradorId")
                        .IsUnique();

                    b.ToTable("PeriodoColaboradores");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "Nombre")
                        .IsUnique();

                    b.ToTable("Sectores");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Colaborador", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany("Colaboradores")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IvaFacilitador.Domain.Payroll.Sector", "Sector")
                        .WithMany("Colaboradores")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Empresa");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.CuentaContable", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany("Cuentas")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IvaFacilitador.Domain.Payroll.Sector", "Sector")
                        .WithMany("Cuentas")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Empresa");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Evento", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.PeriodoColaborador", "PeriodoColaborador")
                        .WithMany("Eventos")
                        .HasForeignKey("PeriodoColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeriodoColaborador");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Feriado", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany("Feriados")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.PayrollQboToken", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Periodo", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany("Periodos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.PeriodoColaborador", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Colaborador", "Colaborador")
                        .WithMany("PeriodoColaboradores")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IvaFacilitador.Domain.Payroll.Periodo", "Periodo")
                        .WithMany("PeriodoColaboradores")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colaborador");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Sector", b =>
                {
                    b.HasOne("IvaFacilitador.Domain.Payroll.Empresa", "Empresa")
                        .WithMany("Sectores")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Colaborador", b =>
                {
                    b.Navigation("PeriodoColaboradores");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Empresa", b =>
                {
                    b.Navigation("Colaboradores");

                    b.Navigation("Cuentas");

                    b.Navigation("Feriados");

                    b.Navigation("Periodos");

                    b.Navigation("Sectores");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Periodo", b =>
                {
                    b.Navigation("PeriodoColaboradores");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.PeriodoColaborador", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("IvaFacilitador.Domain.Payroll.Sector", b =>
                {
                    b.Navigation("Colaboradores");

                    b.Navigation("Cuentas");
                });
#pragma warning restore 612, 618
        }
    }
}

