@using System
@using System.Linq
@using System.Collections

@{
    var section = (ViewData["PayrollSection"] as string) ?? "";

    // Activo por sección (sin funciones locales)
    string aPrin = string.Equals(section, "Principal",        StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aPlan = string.Equals(section, "Planilla total",   StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aDed  = string.Equals(section, "Deducciones",      StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aExt  = string.Equals(section, "Extras",           StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aRep  = string.Equals(section, "Reportes",         StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aEmp  = string.Equals(section, "Empresas",         StringComparison.OrdinalIgnoreCase) ? "active" : "";
    string aCol  = string.Equals(section, "Colaboradores",    StringComparison.OrdinalIgnoreCase) ? "active" : "";

    // ===== Cargar DbContext vía DI sin @inject =====
    object? db = null;
    try
    {
        var dbType = Type.GetType("IvaFacilitador.Areas.Payroll.BaseDatosPayroll.PayrollDbContext");
        if (dbType != null)
            db = Context.RequestServices.GetService(dbType);
    }
    catch { }

    // ===== Enumerar empresas por reflexión (tolerante a nombres distintos) =====
    var rawList = new System.Collections.Generic.List<object>();
    string statusText = "Sin datos";

    try
    {
        if (db != null)
        {
            object? set = null;
            foreach (var pn in new[] { "Companies", "Company", "Empresas", "EmpresasSet" })
            {
                var pi = db.GetType().GetProperty(pn);
                if (pi != null)
                {
                    set = pi.GetValue(db);
                    if (set != null) break;
                }
            }

            if (set is System.Collections.IEnumerable en)
            {
                foreach (var it in en) rawList.Add(it);
            }

            statusText = rawList.Count == 0 ? "Sin empresas" : $"Empresas: {rawList.Count}";
        }
        else
        {
            statusText = "BD no disponible";
        }
    }
    catch
    {
        statusText = "BD no inicializada";
    }

    // ===== Helpers por reflexión para Id y Nombre =====
    Func<object,string> getId = (obj) =>
    {
        var t = obj.GetType();
        foreach (var p in new[] { "CompanyId","Id","ID","EmpresaId","IdEmpresa" })
        {
            var pi = t.GetProperty(p);
            if (pi != null)
            {
                var v = pi.GetValue(obj)?.ToString();
                if (!string.IsNullOrWhiteSpace(v)) return v!;
            }
        }
        return "";
    };

    Func<object,string> getName = (obj) =>
    {
        var t = obj.GetType();
        foreach (var p in new[] { "DisplayName","LegalName","Name","RazonSocial","Razon_Social","CompanyName","Empresa","Titulo" })
        {
            var pi = t.GetProperty(p);
            if (pi != null)
            {
                var v = pi.GetValue(obj)?.ToString();
                if (!string.IsNullOrWhiteSpace(v)) return v!;
            }
        }
        var idPi = t.GetProperty("NationalId") ?? t.GetProperty("Cedula") ?? t.GetProperty("Identificacion");
        var idVal = idPi?.GetValue(obj)?.ToString();
        return !string.IsNullOrWhiteSpace(idVal) ? ("Empresa " + idVal) : "Empresa";
    };

    var items = new System.Collections.Generic.List<(string Id, string Name)>();
    int idx = 1;
    foreach (var c in rawList.OrderBy(o => getName(o)))
    {
        var id = getId(c);
        if (string.IsNullOrWhiteSpace(id)) id = "i" + (idx++);
        items.Add((id, getName(c)));
    }

    var selectedCompanyId = (string?)Context.Request.Query["companyId"] ?? "";
}

<div class="card topbar payroll-scope">
  <div class="card-body d-flex align-items-center gap-2 flex-wrap">
    <div class="btn-group segmented" role="group" aria-label="Navegación RRHH">
      <a asp-area="Payroll" asp-page="/Index"                  class="btn btn-outline-secondary btn-sm @aPrin">Principal</a>
      <a asp-area="Payroll" asp-page="/PlanillaTotal/Index"    class="btn btn-outline-secondary btn-sm @aPlan">Planilla total</a>
      <a asp-area="Payroll" asp-page="/Deducciones/Index"      class="btn btn-outline-secondary btn-sm @aDed">Deducciones</a>
      <a asp-area="Payroll" asp-page="/Extras/Index"           class="btn btn-outline-secondary btn-sm @aExt">Extras</a>
      <a asp-area="Payroll" asp-page="/Reportes/Index"         class="btn btn-outline-secondary btn-sm @aRep">Reportes</a>
      <a asp-area="Payroll" asp-page="/Empresas/Index"         class="btn btn-outline-secondary btn-sm @aEmp">Empresas</a>
      <a asp-area="Payroll" asp-page="/Colaboradores/Index"    class="btn btn-outline-secondary btn-sm @aCol">Colaboradores</a>
    </div>

    <div class="ms-auto d-flex align-items-center gap-2">
      <span class="badge bg-secondary">@statusText</span>

      <form method="get" asp-area="Payroll" asp-page="/Index" class="d-flex align-items-center gap-2">
        <select name="companyId" id="company-select" class="form-select form-select-sm" onchange="this.form.submit()">
          <option value="" selected="@(string.IsNullOrEmpty(selectedCompanyId))">Todas las empresas</option>
          @foreach (var it in items)
          {
              <option value="@it.Id" selected="@(selectedCompanyId == it.Id)">@it.Name</option>
          }
        </select>
        <noscript><button type="submit" class="btn btn-sm btn-outline-secondary">Aplicar</button></noscript>
      </form>
    </div>
  </div>
</div>
