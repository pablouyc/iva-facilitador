@page "/Payroll"
@section Styles {
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="~/css/payroll.css" asp-append-version="true" />
}
@{ ViewData["PayrollSection"] = "Principal"; }


@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")
@{
    ViewData["Title"] = "Principal";
}
<h1>Principal</h1>
<div id="cal-title"></div><p><div id="rrhh-dashboard" class="payroll-scope mb-4">
  

  <div class="rrhh-wrap">
  <div class="rrhh-card">
    <div class="hdr">Calendario</div>
    <div class="body">
      <div class="cal-head d-flex align-items-center gap-2">
  <select id="cal-month" class="form-select form-select-sm" style="width:auto"></select>
  <select id="cal-year" class="form-select form-select-sm" style="width:auto"></select>
  <div class="cal-nav d-flex align-items-center gap-1 ms-auto">
    <button type="button" id="cal-prev" class="btn btn-outline-secondary btn-sm" aria-label="Anterior">‹</button>
    <button type="button" id="cal-today" class="btn btn-outline-secondary btn-sm" aria-label="Hoy">Hoy</button>
    <button type="button" id="cal-next" class="btn btn-outline-secondary btn-sm" aria-label="Siguiente">›</button>
  </div>
</div>
<div class="cal-dow d-grid" style="grid-template-columns:repeat(7,1fr);gap:4px;">
  <div>L</div><div>M</div><div>X</div><div>J</div><div>V</div><div>S</div><div>D</div>
</div>
<div id="cal-grid" class="cal-grid"></div>
<div class="mt-3 small text-muted">Arrastra para seleccionar un rango.</div>
    </div>
  </div>
  <div class="rrhh-card">
    <div class="hdr d-flex justify-content-between align-items-center">
      <span>Eventos</span>
      <span class="small text-muted" id="evt-range-label"></span>
    </div>
    <div class="body">
      <div class="mb-3">
        <div class="fw-semibold mb-2">Del período seleccionado</div>
        <div id="evt-current"></div>
      </div>
      <div>
        <div class="fw-semibold mb-2">Próximos</div>
        <div id="evt-next"></div>
      </div>
    </div>
  </div>
</div><div class="kpi-grid mt-3">
    <div class="kpi"><div class="lbl">Bruto</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Deducciones</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Neto</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Patronales</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl"># Colab</div><div class="val">0</div></div>
    <div class="kpi"><div class="lbl">Horas Extra</div><div class="val">0.00</div></div>
  </div>
</div>

@section Scripts{
<script>
(function(){
  // Feriados (ejemplo) en formato ISO
  const feriadosCR = ["2025-01-01","2025-04-13","2025-04-17","2025-04-18","2025-05-01","2025-07-25","2025-08-15","2025-09-15","2025-12-25"];
  // Capturar controles
  const monthSel = document.getElementById('cal-month');
  const yearSel  = document.getElementById('cal-year');
  const grid     = document.getElementById('cal-grid');
  const lblRange = document.getElementById('evt-range-label');
  const cur      = document.getElementById('evt-current');
  const nxt      = document.getElementById('evt-next');
  // Estado
  let viewDate = new Date();
  let selStart = new Date();
  let selEnd   = new Date();
  selStart.setHours(0,0,0,0);
  selEnd.setHours(0,0,0,0);
  let dragging = false;

  // Funciones auxiliares
  function startOfMonth(dt){ return new Date(dt.getFullYear(), dt.getMonth(), 1); }
  function endOfMonth(dt){ return new Date(dt.getFullYear(), dt.getMonth()+1, 0); }
  function pad2(n){ return n < 10 ? '0'+n : n; }
  function fmtISO(d){ return d.getFullYear() + '-' + pad2(d.getMonth()+1) + '-' + pad2(d.getDate()); }
  function inRange(d,a,b){ return d >= a && d <= b; }

  // Inicializar selects de mes y año
  function initSelectors(){
    // Meses (enero…diciembre)
    monthSel.innerHTML = '';
    for(let i=0; i<12; i++){
      const nombre = new Date(2000,i,1).toLocaleString('es-CR',{month:'long'});
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = nombre.charAt(0).toUpperCase() + nombre.slice(1);
      monthSel.appendChild(opt);
    }
    // Años (actual -3 … actual +4)
    const currentYear = new Date().getFullYear();
    yearSel.innerHTML = '';
    for(let y=currentYear-3; y<=currentYear+4; y++){
      const opt = document.createElement('option');
      opt.value = y;
      opt.textContent = y;
      yearSel.appendChild(opt);
    }
  }
  // Sincroniza selects con viewDate
  function syncSelectors(){
    monthSel.value = String(viewDate.getMonth());
    yearSel.value  = String(viewDate.getFullYear());
  }

  // Renderiza calendario
  function renderCal(){
    syncSelectors();
    grid.innerHTML = '';
    const first = startOfMonth(viewDate);
    const last  = endOfMonth(viewDate);
    let dow = first.getDay();
    if(dow === 0) dow = 7;
    for(let i=0; i<dow-1; i++){
      grid.appendChild(document.createElement('div'));
    }
    for(let day=1; day<=last.getDate(); day++){
      const cell = document.createElement('div');
      cell.className = 'cal-cell';
      cell.textContent = day;
      const curd = new Date(viewDate.getFullYear(), viewDate.getMonth(), day);
      const hoy  = new Date();
      hoy.setHours(0,0,0,0);
      if(fmtISO(curd) === fmtISO(hoy)) cell.classList.add('cal-today');
      if(inRange(curd, selStart, selEnd)) cell.classList.add('cal-selected');
      if(feriadosCR.includes(fmtISO(curd))) cell.style.boxShadow = 'inset 0 -3px 0 #02343F';
      cell.onmousedown = (e) => {
        dragging = true;
        selStart = selEnd = curd;
        renderCal(); renderEvents();
        e.preventDefault();
      };
      cell.onmouseenter = () => {
        if(!dragging) return;
        if(curd < selStart){
          selEnd = selStart;
          selStart = curd;
        } else {
          selEnd = curd;
        }
        renderCal(); renderEvents();
      };
      cell.onmouseup = () => { dragging = false; };
      grid.appendChild(cell);
    }
  }

  // Renderiza eventos de ejemplo
  function renderEvents(){
    const fmt = (d) => d.toLocaleDateString('es-CR',{day:'2-digit',month:'2-digit',year:'numeric'});
    lblRange.textContent = (selStart.getTime() === selEnd.getTime())
      ? fmt(selStart)
      : (fmt(selStart) + ' – ' + fmt(selEnd));
    const itemsNow = [
      {title:'Verificar marcaciones', note:'RRHH'},
      {title:'Aprobar horas extra',   note:'Jefaturas'},
      {title:'Cargar ausencias',      note:'RRHH'}
    ];
    const itemsNext = [
      {title:'Pago planilla',      note:'Tesorería'},
      {title:'Reporte patronales', note:'Contabilidad'}
    ];
    const mk = (e) => '<div class=\"evt\"><div class=\"evt-dot\"></div><div><div class=\"fw-semibold\">'+e.title+'</div><small>'+e.note+'</small></div></div>';
    cur.innerHTML = itemsNow.map(mk).join('');
    nxt.innerHTML = itemsNext.map(mk).join('');
  }

  // Manejadores de selects y botones
  monthSel.onchange = () => {
    viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1);
    renderCal(); renderEvents();
  };
  yearSel.onchange  = () => {
    viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1);
    renderCal(); renderEvents();
  };
  document.getElementById('cal-prev').onclick = () => {
    viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth()-1, 1);
    renderCal(); renderEvents();
  };
  document.getElementById('cal-next').onclick = () => {
    viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth()+1, 1);
    renderCal(); renderEvents();
  };
  document.getElementById('cal-today').onclick = () => {
    viewDate = new Date();
    selStart = new Date();
    selEnd   = new Date();
    selStart.setHours(0,0,0,0);
    selEnd.setHours(0,0,0,0);
    renderCal(); renderEvents();
  };
  document.addEventListener('mouseup', () => { dragging = false; });

  // Inicialización
  initSelectors();
  renderCal();
  renderEvents();
})();
</script>
}
