@page "/Payroll"
@section Styles {
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="~/css/payroll.css" asp-append-version="true" />
}
@{ ViewData["PayrollSection"] = "Principal"; }


@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")
@{
    ViewData["Title"] = "Principal";
}
<h1>Principal</h1>
<p><div id="rrhh-dashboard" class="payroll-scope mb-4">
  

  <div class="rrhh-wrap">
    <div class="rrhh-card">
      <div class="hdr">Calendario</div>
      <div class="body">
        <div class="cal-head">
  <div class="d-flex align-items-center gap-2">
    <select id="cal-month" class="form-select form-select-sm" style="width:auto"></select>
    <select id="cal-year"  class="form-select form-select-sm" style="width:auto"></select>
  </div>
  <div class="cal-nav d-flex align-items-center gap-1">
    <button type="button" id="cal-prev" class="nav-icon" aria-label="Anterior">&lt;</button>
    <button type="button" id="cal-today" class="btn btn-light btn-sm">Hoy</button>
    <button type="button" id="cal-next" class="nav-icon" aria-label="Siguiente">&gt;</button>
  </div>
</div>
          <div class="cal-nav d-flex gap-1">
            <button type="button" id="cal-prev" aria-label="Anterior">&lt;</button>
            <button type="button" id="cal-today" class="btn btn-light btn-sm ms-2">Hoy</button>
            <button type="button" id="cal-next" aria-label="Siguiente">&gt;</button>
          </div>
        </div>
        <div class="cal-dow d-grid" style="grid-template-columns:repeat(7,1fr);gap:4px;">
          <div>L</div><div>M</div><div>X</div><div>J</div><div>V</div><div>S</div><div>D</div>
        </div>
        <div id="cal-grid" class="cal-grid"></div>
        <div class="mt-3 small text-muted">Arrastra para seleccionar un rango.</div>
      </div>
    </div>

    <div class="rrhh-card">
      <div class="hdr d-flex justify-content-between align-items-center">
        <span>Eventos</span>
        <span class="small text-muted" id="evt-range-label"></span>
      </div>
      <div class="body">
        <div class="mb-3">
          <div class="fw-semibold mb-2">Del período seleccionado</div>
          <div id="evt-current"></div>
        </div>
        <div>
          <div class="fw-semibold mb-2">Próximos</div>
          <div id="evt-next"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="kpi-grid mt-3">
    <div class="kpi"><div class="lbl">Bruto</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Deducciones</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Neto</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl">Patronales</div><div class="val">₡ 0.00</div></div>
    <div class="kpi"><div class="lbl"># Colab</div><div class="val">0</div></div>
    <div class="kpi"><div class="lbl">Horas Extra</div><div class="val">0.00</div></div>
  </div>
</div>

@section Scripts{
<script>
(function(){
  const feriadosCR = ["2025-01-01","2025-04-13","2025-04-17","2025-04-18","2025-05-01","2025-07-25","2025-08-15","2025-09-15","2025-12-25"];
  const pad2=n=>(n<10?'0':'')+n, fmtISO=d=>d.getFullYear()+"-"+pad2(d.getMonth()+1)+"-"+pad2(d.getDate());
  let viewDate = new Date(); let selStart=new Date(), selEnd=new Date();
  selStart.setHours(0,0,0,0); selEnd.setHours(0,0,0,0); let dragging=false;

  const monthSel=document.getElementById('cal-month'), yearSel=document.getElementById('cal-year'), grid=document.getElementById('cal-grid');
  const lblRange=document.getElementById('evt-range-label'), cur=document.getElementById('evt-current'), nxt=document.getElementById('evt-next');
  // Reemplaza el título por selects Mes/Año (no rompemos el HTML original)
  calTitle.innerHTML = `
    <div class="d-flex align-items-center gap-2">
      <select id="cal-month" class="form-select form-select-sm"></select>
      <select id="cal-year"  class="form-select form-select-sm"></select>
    </div>`;
  const selMonth = document.getElementById('cal-month');
  const selYear  = document.getElementById('cal-year');

  // Meses en español
  const months = Array.from({length:12}, (_,m)=> new Date(2000,m,1).toLocaleString('es-CR',{month:'long'}))
                      .map(s => s.charAt(0).toUpperCase()+s.slice(1));

  // Poblar opciones de mes
  months.forEach((name, i)=>{
    const o=document.createElement('option'); o.value=i; o.textContent=name; selMonth.appendChild(o);
  });

  // Rango de años (actual - 3 .. actual + 4)
  const yNow = new Date().getFullYear();
  for (let y=yNow-3; y<=yNow+4; y++) {
    const o=document.createElement('option'); o.value=y; o.textContent=y; selYear.appendChild(o);
  }

  function syncSelectors(){
    selMonth.value = String(viewDate.getMonth());
    selYear.value  = String(viewDate.getFullYear());
  }

  selMonth.onchange = ()=>{ viewDate = new Date(parseInt(selYear.value), parseInt(selMonth.value), 1); renderCal(); };
  selYear.onchange  = ()=>{ viewDate = new Date(parseInt(selYear.value), parseInt(selMonth.value), 1); renderCal(); };

  function monthLabel(dt){return dt.toLocaleString('es-CR',{month:'long',year:'numeric'});}
  function startOfMonth(dt){return new Date(dt.getFullYear(), dt.getMonth(), 1);}
  function endOfMonth(dt){return new Date(dt.getFullYear(), dt.getMonth()+1, 0);}
  function inRange(d,a,b){return d>=a && d<=b;}

  function renderCal(){
    syncSelectors();
    if(monthSel&&yearSel){ monthSel.value=viewDate.getMonth().toString(); yearSel.value=viewDate.getFullYear().toString(); }
    grid.innerHTML = "";
    const first=startOfMonth(viewDate), last=endOfMonth(viewDate);
    let dow=first.getDay(); if(dow===0)dow=7; for(let i=0;i<dow-1;i++) grid.appendChild(document.createElement('div'));
    for(let day=1; day<=last.getDate(); day++){
      const cell=document.createElement('div'); cell.className='cal-cell'; cell.textContent=day;
      const curd=new Date(viewDate.getFullYear(), viewDate.getMonth(), day);
      const today=new Date(); today.setHours(0,0,0,0);
      if(fmtISO(curd)===fmtISO(today)) cell.classList.add('cal-today');
      if(inRange(curd, selStart, selEnd)) cell.classList.add('cal-selected');
      if(feriadosCR.includes(fmtISO(curd))) cell.style.boxShadow="inset 0 -3px 0 #02343F";

      cell.onmousedown=(e)=>{dragging=true; selStart=selEnd=curd; initSelectors(); renderCal(); renderEvents(); e.preventDefault();};
      cell.onmouseenter=()=>{ if(!dragging) return; if(curd<selStart){ selEnd=selStart; selStart=curd; } else { selEnd=curd; } initSelectors(); renderCal(); renderEvents(); };
      cell.onmouseup=()=>{dragging=false;};
      grid.appendChild(cell);
    }
  }

  function renderEvents(){
    const fmt=d=>d.toLocaleDateString('es-CR',{day:'2-digit',month:'2-digit',year:'numeric'});
    lblRange.textContent = selStart.getTime()===selEnd.getTime()? fmt(selStart) : (fmt(selStart)+' – '+fmt(selEnd));
    const itemsNow=[
      {title:"Verificar marcaciones",note:"RRHH"},
      {title:"Aprobar horas extra",note:"Jefaturas"},
      {title:"Cargar ausencias",note:"RRHH"}
    ];
    const mk=e=>`<div class="evt"><div class="evt-dot"></div><div><div class="fw-semibold">${e.title}</div><small>${e.note}</small></div></div>`;
    cur.innerHTML = itemsNow.map(mk).join("");
    const itemsNext=[
      {title:"Pago planilla",note:"Tesorería"},
      {title:"Reporte patronales",note:"Contabilidad"}
    ];
    nxt.innerHTML = itemsNext.map(mk).join("");
  }

    function initSelectors(){
    if(!monthSel || !yearSel) return;
    const months = Array.from({length:12}, (_,i)=> new Date(2000,i,1).toLocaleString('es-CR',{month:'long'}));
    monthSel.innerHTML = months.map((m,i)=><option value=""></option>).join('');
    const y = new Date().getFullYear(); const years=[];
    for(let k=y-3;k<=y+3;k++) years.push(k);
    yearSel.innerHTML = years.map(v=><option value=""></option>).join('');
    monthSel.value = viewDate.getMonth().toString();
    yearSel.value = viewDate.getFullYear().toString();
    monthSel.onchange = ()=>{ viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1); initSelectors(); renderCal(); renderEvents(); };
    yearSel.onchange = ()=>{ viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1); initSelectors(); renderCal(); renderEvents(); };
  }
  document.getElementById('cal-prev').onclick=()=>{viewDate=new Date(viewDate.getFullYear(),viewDate.getMonth()-1,1);renderCal();};
  document.getElementById('cal-next').onclick=()=>{viewDate=new Date(viewDate.getFullYear(),viewDate.getMonth()+1,1);renderCal();};
  document.getElementById('cal-today').onclick=()=>{viewDate=new Date(); selStart=selEnd=new Date(); selStart.setHours(0,0,0,0); selEnd.setHours(0,0,0,0); initSelectors(); renderCal(); renderEvents();};

  initSelectors(); renderCal(); renderEvents();
  document.addEventListener('mouseup',()=>dragging=false);
})();
</script>
}</p>











<!-- bump: 2025-09-18T13:05:56 -->


