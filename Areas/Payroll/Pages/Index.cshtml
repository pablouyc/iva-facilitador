@page
@{ ViewData["Title"] = "Principal"; ViewData["PayrollSection"] = "Principal"; }


<partial name="~/Areas/Payroll/Components/_Topbar.cshtml" />

<h1>Principal</h1>
<div class=""row"">
  <div class=""col-md-4"">
    <div class=""card"">
      <div class=""card-header"">Calendario</div>
      <div class=""card-body"">
        <div class=""d-flex gap-2 mb-2"">
          <select id=""cal-month"" class=""form-select form-select-sm""></select>
          <select id=""cal-year"" class=""form-select form-select-sm""></select>
          <button id=""cal-today"" class=""btn btn-sm btn-dark"">Hoy</button>
        </div>
        <div id=""cal-grid"" class=""cal-grid"" style=""display:grid;grid-template-columns:repeat(7,1fr);gap:4px;""></div>
        <div class=""small text-muted mt-2"">Arrastra para seleccionar un rango.</div>
      </div>
    </div>
  </div>
  <div class=""col-md-8"">
    <div class=""card"">
      <div class=""card-header d-flex justify-content-between"">
        <span>Eventos</span>
        <span id=""evt-range-label"" class=""small text-muted""></span>
      </div>
      <div class=""card-body"">
        <div class=""mb-3"">
          <div class=""fw-bold mb-1"">Del período seleccionado</div>
          <div id=""evt-current""></div>
        </div>
        <div>
          <div class=""fw-bold mb-1"">Próximos</div>
          <div id=""evt-next""></div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class=""row mt-3"">
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small"">Bruto</div><div class=""fw-bold"">₡ 0.00</div></div></div></div>
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small"">Deducciones</div><div class=""fw-bold"">₡ 0.00</div></div></div></div>
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small"">Neto</div><div class=""fw-bold"">₡ 0.00</div></div></div></div>
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small"">Patronales</div><div class=""fw-bold"">₡ 0.00</div></div></div></div>
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small""># Colab</div><div class=""fw-bold"">0</div></div></div></div>
  <div class=""col-2""><div class=""card""><div class=""card-body""><div class=""text-muted small"">Horas Extra</div><div class=""fw-bold"">0.00</div></div></div></div>
</div>

@section Scripts {
<script>
(function(){
  let viewDate = new Date();
  let selStart = new Date(); selStart.setHours(0,0,0,0);
  let selEnd   = new Date(); selEnd.setHours(0,0,0,0);
  let dragging = false;

  const grid = document.getElementById('cal-grid');
  const monthSel = document.getElementById('cal-month');
  const yearSel  = document.getElementById('cal-year');
  const lblRange = document.getElementById('evt-range-label');
  const curList  = document.getElementById('evt-current');
  const nxtList  = document.getElementById('evt-next');
  const btnToday= document.getElementById('cal-today');
  const companySel = document.querySelector('select[asp-for]') || document.querySelector('select[name="Empresa"]');

  function pad2(n){ return (n<10?'0':'') + n; }
  function fmtISO(d){ return d.getFullYear() + '-' + pad2(d.getMonth()+1) + '-' + pad2(d.getDate()); }
  function startOfMonth(d){ return new Date(d.getFullYear(), d.getMonth(), 1); }
  function endOfMonth(d){ return new Date(d.getFullYear(), d.getMonth()+1, 0); }
  function inRange(d,a,b){ return d>=a && d<=b; }

  function initSelectors(){
    // Poblar meses
    monthSel.innerHTML = "";
    const meses = Array.from({length:12}, (_,i)=> new Date(2000,i,1).toLocaleString('es-CR', { month:'long' }));
    meses.forEach((name, i) => {
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = name.charAt(0).toUpperCase() + name.slice(1);
      monthSel.appendChild(opt);
    });
    // Poblar años (actual -3 .. +4)
    yearSel.innerHTML = "";
    const yNow = new Date().getFullYear();
    for(let y = yNow - 3; y <= yNow + 4; y++){
      const opt = document.createElement('option');
      opt.value = y; opt.textContent = y;
      yearSel.appendChild(opt);
    }
    syncSelectors();
  }
  function syncSelectors(){
    monthSel.value = viewDate.getMonth().toString();
    yearSel.value  = viewDate.getFullYear().toString();
  }
  monthSel.onchange = ()=>{ viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1); renderCal(); loadEvents(); };
  yearSel.onchange  = ()=>{ viewDate = new Date(parseInt(yearSel.value), parseInt(monthSel.value), 1); renderCal(); loadEvents(); };

  btnToday.addEventListener('click', () => {
    viewDate = new Date();
    selStart = new Date(); selStart.setHours(0,0,0,0);
    selEnd   = new Date(); selEnd.setHours(0,0,0,0);
    syncSelectors();
    renderCal(); loadEvents();
  });

  function renderCal(){
    syncSelectors();
    grid.innerHTML = "";
    const first = startOfMonth(viewDate);
    const last  = endOfMonth(viewDate);
    let dow = first.getDay(); if(dow === 0) dow = 7;
    for(let i=0; i<dow-1; i++) grid.appendChild(document.createElement('div'));
    for(let day = 1; day <= last.getDate(); day++){
      const cell = document.createElement('div');
      cell.className = 'cal-cell';
      cell.textContent = day;
      const d = new Date(viewDate.getFullYear(), viewDate.getMonth(), day);
      if(fmtISO(d) === fmtISO(new Date())) cell.classList.add('cal-today');
      if(inRange(d, selStart, selEnd)) cell.classList.add('cal-selected');
      if(eventDates.has(fmtISO(d))) cell.classList.add('cal-hasEvent');

      cell.onmousedown = (e) => { dragging = true; selStart = selEnd = d; renderCal(); loadEvents(); e.preventDefault(); };
      cell.onmouseenter = () => {
        if(!dragging) return;
        if(d < selStart){ selEnd = selStart; selStart = d; }
        else { selEnd = d; }
        renderCal(); loadEvents();
      };
      cell.onmouseup = () => { dragging = false; };
      grid.appendChild(cell);
    }
  }

  let eventDates = new Set();
  async 
function loadEvents() {
    const start = selStart.toISOString().split("T")[0];
    const end   = selEnd.toISOString().split("T")[0];
    const empresa = document.querySelector("select.form-select").value || "";
    fetch(`/api/payroll/events?empresaId=${empresa}&start=${start}&end=${end}`)
      .then(r => r.json())
      .then(data => {
        // marcar en calendario
        const datesWithEvents = new Set(data.map(e => e.date));
        document.querySelectorAll(".cal-cell").forEach(cell => {
          const curDate = `${viewDate.getFullYear()}-${String(viewDate.getMonth()+1).padStart(2,"0")}-${String(cell.textContent).padStart(2,"0")}`;
          if (datesWithEvents.has(curDate)) cell.style.background = "#e6f4f1";
        });
        // rellenar listas
        const listNow = document.getElementById("evt-current");
        const listNext = document.getElementById("evt-next");
        listNow.innerHTML = "";
        listNext.innerHTML = "";
        data.forEach(evt => {
          const item = `<div class="evt"><div class="evt-dot"></div><div><div class="fw-semibold">${evt.title}</div><small>${evt.category}</small></div></div>`;
          if (evt.date >= start && evt.date <= end) listNow.innerHTML += item; else listNext.innerHTML += item;
        });
      });
});
    curList.innerHTML = selEvents.map(e => <div class="evt"><div class="evt-dot"></div><div><div class="fw-semibold"></div><small></small></div></div>).join("");
    // Próximos (fuera de rango actual)
    const future = data.filter(e => e.date.split('T')[0] > endISO);
    nxtList.innerHTML = future.map(e => <div class="evt"><div class="evt-dot"></div><div><div class="fw-semibold"></div><small></small></div></div>).join("");
    // Etiqueta de rango
    const fmtDate = d => new Date(d).toLocaleDateString('es-CR', { day:'2-digit', month:'2-digit', year:'numeric' });
    lblRange.textContent = selStart.getTime() === selEnd.getTime() ? fmtDate(selStart) : ${fmtDate(selStart)} – ;
  }

  document.addEventListener('mouseup', () => { dragging = false; });

  initSelectors();
  renderCal();
  loadEvents();
  if(companySel){
    companySel.onchange = () => { loadEvents(); };
  }
})();
</script>
}



