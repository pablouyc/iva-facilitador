@page
@model IvaFacilitador.Areas.Payroll.Pages.Colaboradores.IndexModel
@{
    ViewData["Title"] = "Colaboradores";
    ViewData["PayrollSection"] = "Colaboradores";

    var canAdd = Model.CompanyId.HasValue && Model.IsCompanyLinked;
    var isActivos = string.Equals(Model.Status, "activos", StringComparison.OrdinalIgnoreCase);
    var qActivos = Model.CompanyId.HasValue ? $"?companyId={Model.CompanyId}&status=activos" : "?status=activos";
    var qInactivos = Model.CompanyId.HasValue ? $"?companyId={Model.CompanyId}&status=inactivos" : "?status=inactivos";
}
@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")

<h1>Colaboradores</h1>

<!-- Barra de navegación de estado -->
<ul class="nav nav-pills mb-3">
  <li class="nav-item">
    <a class="nav-link @(isActivos ? "active" : "")" href="@qActivos">Activos</a>
  </li>
  <li class="nav-item">
    <a class="nav-link @(!isActivos ? "active" : "")" href="@qInactivos">Inactivos</a>
  </li>
</ul>

<!-- Acciones -->
<div class="d-flex justify-content-between align-items-center mb-3">
  <div>
    @if (Model.CompanyId.HasValue) {
      <span class="badge bg-secondary">EmpresaId: @Model.CompanyId</span>
    } else {
      <span class="text-muted">Seleccione una empresa en el header</span>
    }
  </div>

  <div>
    <button type="button" class="btn btn-primary" @(canAdd ? "" : "disabled") data-bs-toggle="modal" data-bs-target="#dlgAgregar">
      Agregar
    </button>
  </div>
</div>

<!-- Tabla de colaboradores -->
<div class="table-responsive">
  <table class="table table-striped align-middle">
    <thead>
      <tr>
        <th>Nombre</th>
        <th>Cédula</th>
        <th>Sector</th>
        <th>Cargo</th>
        <th>Salario mensual</th>
        <th>CCSS</th>
        <th>INS</th>
        <th>% Pago</th>
        <th>Estado</th>
        @if (!isActivos) { <th>Fecha baja</th> }
        <th style="width:1%"></th>
      </tr>
    </thead>
    <tbody>
    @if (Model.Rows.Count == 0)
    {
        <tr>
          <td colspan="@(isActivos ? 10 : 11)" class="text-muted">No hay colaboradores @(isActivos ? "activos" : "inactivos").</td>
        </tr>
    }
    else
    {
        @foreach (var row in Model.Rows)
        {
            <tr>
              <td>@row.Nombre</td>
              <td>@row.Cedula</td>
              <td>@row.Sector</td>
              <td>@row.Cargo</td>
              <td>@(row.SalarioMensual?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("es-CR")) ?? "-")</td>
              <td>@(row.HasCcss ? "Sí" : "No")</td>
              <td>@(row.HasIns ? "Sí" : "No")</td>
              <td>@row.PorcentajePago</td>
              <td>@row.Estado</td>
              @if (!isActivos) { <td>@(row.EndDate?.ToString("yyyy-MM-dd") ?? "-")</td> }
              <td>
                <a class="btn btn-sm btn-outline-secondary" href="#" title="Editar">Editar</a>
              </td>
            </tr>
        }
    }
    </tbody>
  </table>
</div>

<!-- Modal Agregar (placeholder, se implementa en Iteración 7) -->
<div class="modal fade" id="dlgAgregar" tabindex="-1" aria-labelledby="dlgAgregarLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="dlgAgregarLabel">Agregar colaboradores</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
<!-- Selector de vistas -->
<div class="mb-3">
  <div class="btn-group" role="group" aria-label="Método de alta">
    <button type="button" class="btn btn-outline-primary active" data-view="qbo" id="btnViewQbo">QBO</button>
    <button type="button" class="btn btn-outline-primary" data-view="manual" id="btnViewManual">Manual</button>
    <button type="button" class="btn btn-outline-primary" data-view="excel" id="btnViewExcel">Excel</button>
  </div>
</div>

<!-- Vista QBO -->
<div id="view-qbo">
  <div class="alert alert-info" id="qboNotice" style="display:none;"></div>
  <div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-secondary" id="btnFetchQbo">Traer de QBO</button>
    <div class="spinner-border spinner-border-sm text-secondary" role="status" id="qboSpinner" style="display:none;">
      <span class="visually-hidden">Cargando…</span>
    </div>
  </div>
  <div class="table-responsive" style="max-height: 350px; overflow:auto;">
    <table class="table table-sm table-striped" id="tblQbo">
      <thead>
        <tr>
          <th>Nombre</th><th>Email</th><th>Teléfono</th><th>Estado</th>
        </tr>
      </thead>
      <tbody>
        <tr><td colspan="4" class="text-muted">Sin datos. Presione “Traer de QBO”.</td></tr>
      </tbody>
    </table>
  </div>
</div>

<!-- Vista Manual -->
<div id="view-manual" class="d-none">
  <form id="frmManual" class="row g-3">
    <div class="col-md-3">
      <label class="form-label">Cédula</label>
      <input type="text" class="form-control" id="mnNationalId" maxlength="50" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Nombre</label>
      <input type="text" class="form-control" id="mnFirstName" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Apellido</label>
      <input type="text" class="form-control" id="mnLastName" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Fecha ingreso</label>
      <input type="date" class="form-control" id="mnJoinDate" />
    </div>

    <div class="col-md-4">
      <label class="form-label">Email</label>
      <input type="email" class="form-control" id="mnEmail" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Teléfono</label>
      <input type="text" class="form-control" id="mnPhone" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Salario mensual</label>
      <input type="number" class="form-control" id="mnSalary" step="0.01" min="0" />
    </div>

    <div class="col-md-4">
      <label class="form-label">Sector</label>
      <input type="text" class="form-control" id="mnSector" placeholder="(coincidir con sectores parametrizados)" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Cargo</label>
      <input type="text" class="form-control" id="mnJob" />
    </div>
    <div class="col-md-4 d-flex align-items-end gap-3">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="mnCcss">
        <label class="form-check-label" for="mnCcss">CCSS</label>
      </div>
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="mnIns">
        <label class="form-check-label" for="mnIns">INS</label>
      </div>
    </div>

    <div class="col-12">
      <label class="form-label">Porcentajes de pago (la suma debe ser 100)</label>
      <div class="row g-2">
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct1" min="0" max="100" step="0.01" placeholder="%1" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct2" min="0" max="100" step="0.01" placeholder="%2" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct3" min="0" max="100" step="0.01" placeholder="%3" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct4" min="0" max="100" step="0.01" placeholder="%4" />
        </div>
      </div>
      <small class="text-muted">Mensual: use solo %1=100. Quincenal: use %1/%2 (p.ej. 50/50). Semanal: distribuya %1–%4. </small>
      <div class="mt-1">
        <span>Suma actual: </span>
        <span id="sumPct" class="badge bg-secondary">0</span>
      </div>
    </div>

    <div class="col-12">
      <button type="button" class="btn btn-primary" id="btnManualSubmit">Guardar (stub)</button>
      <span class="ms-2 text-muted">Crea/matchea en QBO y (aún) no persiste en BD.</span>
    </div>
  </form>

  <div class="mt-3" id="manualMsg" style="display:none;"></div>
</div>

<!-- Vista Excel -->
<div id="view-excel" class="d-none">
  <p class="text-muted">Cargue colaboradores de forma masiva. Use la plantilla (o genere una mínima aquí) y pegue el CSV debajo.</p>
  <div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary" id="btnGenCsv">Descargar plantilla mínima</button>
    <button type="button" class="btn btn-primary" id="btnUploadCsv">Procesar CSV (stub)</button>
  </div>
  <textarea id="csvText" class="form-control" rows="8" placeholder="Encabezados esperados: NationalId,FirstName,LastName,Email,Phone"></textarea>
  <div class="mt-3" id="uploadMsg" style="display:none;"></div>
</div>

<script>
(() => {
  const COMPANY_ID = @(Model.CompanyId ?? 0);
  const LINKED     = @(Model.IsCompanyLinked.ToString().ToLower());
  const SECTORS    = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.SectorNames ?? new List<string>{"General"}));
  const PERIOD     = "@(Model.Periodo ?? "Mensual")";
  const PCT_SLOTS  = (PERIOD === "Mensual" ? 1 : (PERIOD === "Quincenal" ? 2 : 4));

  
  function applyPctVisibility(){
    const tbl=document.getElementById("tblManual");
    if(!tbl) return;
    const idxs=[];
    if(PCT_SLOTS<4) idxs.push(16);
    if(PCT_SLOTS<3) idxs.push(15);
    if(PCT_SLOTS<2) idxs.push(14);
    idxs.forEach(i=>{
      tbl.querySelectorAll("thead th:nth-child("+i+")").forEach(th=> th.style.display="none");
      tbl.querySelectorAll("tbody tr td:nth-child("+i+")").forEach(td=> td.style.display="none");
    });
  }
  applyPctVisibility();
// --- Helpers ---
  const qs  = (sel) => document.querySelector(sel);
  const qsa = (sel) => Array.from(document.querySelectorAll(sel));
  const show = (el) => el && (el.style.display = "");
  const hide = (el) => el && (el.style.display = "none");
  const addClass = (el, cls) => el && el.classList.add(cls);
  const remClass = (el, cls) => el && el.classList.remove(cls);

  // Vistas
  const views = { qbo: qs("#view-qbo"), manual: qs("#view-manual"), excel: qs("#view-excel") };
  function switchView(name) {
    Object.entries(views).forEach(([k,el])=> { if (!el) return; (k===name)? remClass(el,"d-none"): addClass(el,"d-none"); });
    qsa('[data-view]').forEach(b => { (b.getAttribute('data-view')||'')===name? addClass(b,"active"): remClass(b,"active"); });
    if (name === "manual") setPctVisibility();
  }
  qsa('[data-view]').forEach(b => b.addEventListener('click', ()=> switchView(b.getAttribute('data-view'))));

  // ---------- QBO ----------
  const btnFetchQbo = qs("#btnFetchQbo");
  const qboSpinner  = qs("#qboSpinner");
  const qboNotice   = qs("#qboNotice");
  const tblQboBody  = () => qs("#tblQbo tbody");
  let QBO_LIST = null;

  function setQboReadyState() {
    if (!COMPANY_ID || !LINKED) {
      show(qboNotice); qboNotice.className = "alert alert-warning";
      qboNotice.textContent = !COMPANY_ID ? "Seleccione una empresa en el header para habilitar QBO." : "Esta empresa no está vinculada a QBO.";
      if (btnFetchQbo) btnFetchQbo.disabled = true;
    } else {
      hide(qboNotice); if (btnFetchQbo) btnFetchQbo.disabled = false;
    }
  }

  async function fetchQboEmployees() {
    if (!COMPANY_ID || !LINKED) return;
    if (qboSpinner) show(qboSpinner);
    try {
      const url = /payroll/api/qbo/employees?companyId=&includeInactive=false;
      const resp = await fetch(url, { method: "GET" });
      const data = await resp.json();
      const tb = tblQboBody(); if (!tb) return;
      tb.innerHTML = "";
      if (!Array.isArray(data) || data.length === 0) {
        tb.innerHTML = '<tr><td colspan="4" class="text-muted">No se recibieron colaboradores desde QBO.</td></tr>'; return;
      }
      QBO_LIST = data;
      for (const e of data) {
        const tr = document.createElement("tr");
        tr.innerHTML = <td></td><td></td><td></td><td></td>;
        tb.appendChild(tr);
      }
    } catch (err) {
      const tb = tblQboBody(); if (tb) tb.innerHTML = <tr><td colspan="4" class="text-danger">Error obteniendo QBO: </td></tr>;
    } finally { if (qboSpinner) hide(qboSpinner); }
  }
  if (btnFetchQbo) btnFetchQbo.addEventListener('click', fetchQboEmployees);
  setQboReadyState();

  // ---------- Manual ----------
  const lblPeriodo = qs("#lblPeriodo"); if (lblPeriodo) lblPeriodo.textContent = PERIOD;
  const tbManual   = qs("#tblManual tbody");

  // Oculta/muestra columnas % según PCT_SLOTS (12..15 son %1..%4)
  function setPctVisibility() {
    const table = qs("#tblManual"); if (!table) return;
    const pctIdx = [12,13,14,15]; // TH/TD indexes para %1..%4
    const ths = table.tHead?.rows?.[0]?.cells || [];
    pctIdx.forEach((idx,i) => {
      if (ths[idx]) ths[idx].style.display = (i < PCT_SLOTS) ? "" : "none";
    }const rows = table.tBodies[0]?.rows || [];
    Array.from(rows).forEach(row => {
      pctIdx.forEach((idx,i) => {
        const cell = row.cells[idx]; if (!cell) return;
        cell.style.display = (i < PCT_SLOTS) ? "" : "none";
        const inp = cell.querySelector("input");
        if (inp) {
          if (i < PCT_SLOTS) { inp.disabled = false; }
          else { inp.value = "0"; inp.disabled = true; }
        }
      }// Recalcular suma al ajustar celdas
      renderSumBadge(row);
    }}

  function pctSumForRow(tr){
  const sels = [".pct1",".pct2",".pct3",".pct4"].slice(0, PCT_SLOTS);
  const vs   = sels.map(sel => parseFloat(tr.querySelector(sel)?.value || "0")).filter(v => !isNaN(v));
  return vs.reduce((a,b)=>a+b, 0);
}return vs.reduce((a,b)=>a+b,0);
  }
  function renderSumBadge(tr) {
    const sum = Math.round((pctSumForRow(tr) + Number.EPSILON)*100)/100;
    const cell = tr.querySelector(".sumcell");
    if (!cell) return sum;
    cell.textContent = sum.toString();
    cell.className = "sumcell badge " + (Math.abs(sum-100)<0.001 ? "bg-success" : "bg-danger");
    return sum;
  }

  function qboSelectHtml(selectedId = "", selectedText = "") {
    const opts = [];
    opts.push(<option value="">No existe (crear en QBO)</option>);
    if (Array.isArray(QBO_LIST)) {
      for (const e of QBO_LIST) {
        const sel = (e.id === selectedId) ? " selected" : "";
        opts.push(<option value="\"\>\</option>);
      }
    } else if (selectedId) {
      opts.push(<option value="\" selected>\</option>);
    }
    return <select class="form-select form-select-sm qboSel">\</select>;
  }
  function sectorSelectHtml(value="") {
    const opts = (SECTORS||["General"]).map(s => <option value="\"\>\</option>);
    return <select class="form-select form-select-sm sectorSel">\</select>;
  }

  function addRow(initial = {}) {
    if (!tbManual) return;
    if (tbManual.querySelector(".placeholder")) tbManual.innerHTML = "";
    const tr = document.createElement("tr");
    tr.innerHTML = 
      <td>\</td>
      <td><input class="form-control form-control-sm nid" value="\"></td>
      <td><input class="form-control form-control-sm fn"  value="\"></td>
      <td><input class="form-control form-control-sm ln"  value="\"></td>
      <td><input type="date" class="form-control form-control-sm jd" value="\"></td>
      <td><input class="form-control form-control-sm em"  value="\"></td>
      <td><input class="form-control form-control-sm ph"  value="\"></td>
      <td><input type="number" min="0" step="0.01" class="form-control form-control-sm sal" value="\"></td>
      <td>\</td>
      <td><input class="form-control form-control-sm job" value="\"></td>
      <td class="text-center"><input type="checkbox" class="form-check-input ccss"\></td>
      <td class="text-center"><input type="checkbox" class="form-check-input ins"\></td>
      <td><input type="number" min="0" max="100" step="0.01" class="form-control form-control-sm pct1" value="\"></td>
      <td><input type="number" min="0" max="100" step="0.01" class="form-control form-control-sm pct2" value="\"></td>
      <td><input type="number" min="0" max="100" step="0.01" class="form-control form-control-sm pct3" value="\"></td>
      <td><input type="number" min="0" max="100" step="0.01" class="form-control form-control-sm pct4" value="\"></td>
      <td><span class="sumcell badge bg-secondary">0</span></td>
      <td><button type="button" class="btn btn-sm btn-outline-danger rm">✕</button></td>
    ;
    tr.querySelectorAll("input[type=number]").forEach(i => i.addEventListener("input", ()=>renderSumBadge(tr)));
    tr.querySelector(".rm").addEventListener("click", ()=>{
      tr.remove();
      if (!tbManual.children.length) tbManual.innerHTML='<tr class="placeholder"><td colspan="17" class="text-muted">Sin filas. Pulse “Añadir fila”.</td></tr>';
      setPctVisibility();
    }tbManual.appendChild(tr);
    setPctVisibility(); // oculta/inhabilita % que no aplican
    renderSumBadge(tr);
  }

  const btnAddRow = qs("#btnAddRow");
  if (btnAddRow) btnAddRow.addEventListener("click", ()=> addRow({}));

  function collectRows() {
    return qsa("#tblManual tbody tr").filter(tr => !tr.classList.contains("placeholder")).map(tr => {
      const qboSel  = tr.querySelector(".qboSel");
      const selText = qboSel?.selectedOptions?.[0]?.textContent || "";
      const num = (sel) => {
        const el = tr.querySelector(sel);
        const v  = parseFloat(el?.value || "0");
        return (isNaN(v) || el?.disabled) ? 0 : v;
      };
      return {
        qboId:      qboSel?.value || null,
        qboName:    qboSel?.value ? selText : null,
        nationalId: tr.querySelector(".nid")?.value?.trim() || "",
        firstName:  tr.querySelector(".fn")?.value?.trim()  || "",
        lastName:   tr.querySelector(".ln")?.value?.trim()  || "",
        joinDate:   tr.querySelector(".jd")?.value || null,
        email:      tr.querySelector(".em")?.value?.trim()  || null,
        phone:      tr.querySelector(".ph")?.value?.trim()  || null,
        baseSalary: parseFloat(tr.querySelector(".sal")?.value || "0"),
        sector:     tr.querySelector(".sectorSel")?.value || null,
        jobTitle:   tr.querySelector(".job")?.value?.trim() || null,
        hasCcss:    tr.querySelector(".ccss")?.checked || false,
        hasIns:     tr.querySelector(".ins")?.checked  || false,
        payPct1:    num(".pct1"),
        payPct2:    num(".pct2"),
        payPct3:    num(".pct3"),
        payPct4:    num(".pct4")
      };
    }}

  const manualMsg = qs("#manualMsg");
  async function saveRows() {
    if (!COMPANY_ID) { manualMsg.className="text-danger"; manualMsg.style.display=""; manualMsg.textContent="Seleccione una empresa."; return; }
    const rows = collectRows();
    if (rows.length===0) { manualMsg.className="text-danger"; manualMsg.style.display=""; manualMsg.textContent="No hay filas para guardar."; return; }
    for (const r of rows) {
      if (!r.nationalId || !r.firstName || !r.lastName) { manualMsg.className="text-danger"; manualMsg.style.display=""; manualMsg.textContent="Cédula, Nombre y Apellido son obligatorios."; return; }
      const arr=[r.payPct1||0,r.payPct2||0,r.payPct3||0,r.payPct4||0].slice(0,PCT_SLOTS); const s=arr.reduce((a,b)=>a+b,0);
      if (Math.abs(s-100)>0.001) { manualMsg.className="text-danger"; manualMsg.style.display=""; manualMsg.textContent="La suma de porcentajes debe ser 100."; return; }
    }
    try {
      const body = { companyId: COMPANY_ID, rows };
      const resp = await fetch("/payroll/api/employees/upload", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(body) });
      const data = await resp.json();
      manualMsg.style.display=""; manualMsg.className = resp.ok? "alert alert-success":"alert alert-danger";
      manualMsg.innerHTML = resp.ok ? \Procesados: <strong>\</strong>, Omitidos: \\ : (data?.message || "Error al guardar.");
      if (resp.ok) setTimeout(()=>location.reload(), 500);
    } catch (err) {
      manualMsg.className="alert alert-danger"; manualMsg.style.display=""; manualMsg.textContent="Error: "+err;
    }
  }
  const btnSaveRows = qs("#btnSaveRows"); if (btnSaveRows) btnSaveRows.addEventListener("click", saveRows);

  // ---------- Excel (se mantiene igual) ----------
  const uploadMsg = qs("#uploadMsg");
  const prevHost  = qs("#xlsxPreview");
  const actions   = qs("#xlsxActions");

  const btnGen = qs("#btnDownloadXlsx");
  if (btnGen) btnGen.addEventListener("click", async () => {
    if (!COMPANY_ID) { uploadMsg.className="text-danger"; uploadMsg.style.display=""; uploadMsg.textContent="Seleccione una empresa."; return; }
    const url = \/payroll/api/employees/template-xlsx?companyId=\\;
    const resp = await fetch(url);
    const blob = await resp.blob();
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob); a.download = "Colaboradores_Plantilla.xlsx";
    document.body.appendChild(a); a.click(); setTimeout(()=>{ document.body.removeChild(a); URL.revokeObjectURL(a.href); },0);
  }const fileX = qs("#fileXlsx");
  const btnPrev = qs("#btnPreviewXlsx");
  if (btnPrev) btnPrev.addEventListener("click", async () => {
    if (!COMPANY_ID) { uploadMsg.className="text-danger"; uploadMsg.style.display=""; uploadMsg.textContent="Seleccione una empresa."; return; }
    const f = fileX?.files?.[0];
    if (!f) { uploadMsg.className="text-danger"; uploadMsg.style.display=""; uploadMsg.textContent="Seleccione un archivo .xlsx."; return; }
    try {
      const fd = new FormData(); fd.append("file", f);
      const resp = await fetch(\/payroll/api/employees/preview-xlsx?companyId=\\, { method:"POST", body: fd });
      const data = await resp.json();
      if (!resp.ok) { uploadMsg.className="alert alert-danger"; uploadMsg.style.display=""; uploadMsg.textContent = data?.message || "No se pudo leer el Excel."; return; }
      const rows = Array.isArray(data?.rows) ? data.rows : [];
      if (rows.length===0) { uploadMsg.className="alert alert-warning"; uploadMsg.style.display=""; uploadMsg.textContent = "El Excel no tiene filas."; return; }
      let html = <table class="table table-sm"><thead><tr><th>Cédula</th><th>Nombre</th><th>Apellido</th><th>Email</th><th>Teléfono</th></tr></thead><tbody>;
      for (const r of rows) html += <tr><td>\</td><td>\</td><td>\</td><td>\</td><td>\</td></tr>;
      html += </tbody></table><div class="small text-muted">Tip: pulse “Confirmar y guardar” o use “Descartar”.</div>;
      prevHost.innerHTML = html; show(prevHost); show(actions); uploadMsg.style.display = "none";

      const btnConfirm = qs("#btnConfirmXlsx");
      btnConfirm.onclick = async () => {
        for (const r of rows) addRow({
  nationalId:r.nationalId, firstName:r.firstName, lastName:r.lastName, email:r.email, phone:r.phone,
  payPct1:(PCT_SLOTS===1?100:(PCT_SLOTS===2?50:25)),
  payPct2:(PCT_SLOTS>=2?(PCT_SLOTS===2?50:25):""),
  payPct3:(PCT_SLOTS>=3?25:""),
  payPct4:(PCT_SLOTS>=4?25:"")
});
        switchView("manual");
        hide(prevHost); hide(actions);
      };
    } catch (err) {
      uploadMsg.className="alert alert-danger"; uploadMsg.style.display=""; uploadMsg.textContent="Error: "+err;
    }
  }const btnClear = qs("#btnClearPreview");
  if (btnClear) btnClear.addEventListener("click", ()=>{ prevHost.innerHTML=""; hide(prevHost); hide(actions); uploadMsg.style.display="none"; fileX.value=""; });

  // Inicial
  switchView("qbo");
  setPctVisibility(); // aplicar ocultamiento TH al cargar
})();
</script>
<div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-primary" disabled>Continuar</button>
      </div>
    </div>
  </div>
</div>











