@page
@model IvaFacilitador.Areas.Payroll.Pages.Colaboradores.IndexModel
@{
    ViewData["Title"] = "Colaboradores";
    ViewData["PayrollSection"] = "Colaboradores";

    var canAdd = Model.CompanyId.HasValue && Model.IsCompanyLinked;
    var isActivos = string.Equals(Model.Status, "activos", StringComparison.OrdinalIgnoreCase);
    var qActivos = Model.CompanyId.HasValue ? $"?companyId={Model.CompanyId}&status=activos" : "?status=activos";
    var qInactivos = Model.CompanyId.HasValue ? $"?companyId={Model.CompanyId}&status=inactivos" : "?status=inactivos";
}
@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")

<h1>Colaboradores</h1>

<!-- Barra de navegación de estado -->
<ul class="nav nav-pills mb-3">
  <li class="nav-item">
    <a class="nav-link @(isActivos ? "active" : "")" href="@qActivos">Activos</a>
  </li>
  <li class="nav-item">
    <a class="nav-link @(!isActivos ? "active" : "")" href="@qInactivos">Inactivos</a>
  </li>
</ul>

<!-- Acciones -->
<div class="d-flex justify-content-between align-items-center mb-3">
  <div>
    @if (Model.CompanyId.HasValue) {
      <span class="badge bg-secondary">EmpresaId: @Model.CompanyId</span>
    } else {
      <span class="text-muted">Seleccione una empresa en el header</span>
    }
  </div>

  <div>
    <button type="button" class="btn btn-primary" @(canAdd ? "" : "disabled") data-bs-toggle="modal" data-bs-target="#dlgAgregar">
      Agregar
    </button>
  </div>
</div>

<!-- Tabla de colaboradores -->
<div class="table-responsive">
  <table class="table table-striped align-middle">
    <thead>
      <tr>
        <th>Nombre</th>
        <th>Cédula</th>
        <th>Sector</th>
        <th>Cargo</th>
        <th>Salario mensual</th>
        <th>CCSS</th>
        <th>INS</th>
        <th>% Pago</th>
        <th>Estado</th>
        @if (!isActivos) { <th>Fecha baja</th> }
        <th style="width:1%"></th>
      </tr>
    </thead>
    <tbody>
    @if (Model.Rows.Count == 0)
    {
        <tr>
          <td colspan="@(isActivos ? 10 : 11)" class="text-muted">No hay colaboradores @(isActivos ? "activos" : "inactivos").</td>
        </tr>
    }
    else
    {
        @foreach (var row in Model.Rows)
        {
            <tr>
              <td>@row.Nombre</td>
              <td>@row.Cedula</td>
              <td>@row.Sector</td>
              <td>@row.Cargo</td>
              <td>@(row.SalarioMensual?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("es-CR")) ?? "-")</td>
              <td>@(row.HasCcss ? "Sí" : "No")</td>
              <td>@(row.HasIns ? "Sí" : "No")</td>
              <td>@row.PorcentajePago</td>
              <td>@row.Estado</td>
              @if (!isActivos) { <td>@(row.EndDate?.ToString("yyyy-MM-dd") ?? "-")</td> }
              <td>
                <a class="btn btn-sm btn-outline-secondary" href="#" title="Editar">Editar</a>
              </td>
            </tr>
        }
    }
    </tbody>
  </table>
</div>

<!-- Modal Agregar (placeholder, se implementa en Iteración 7) -->
<div class="modal fade" id="dlgAgregar" tabindex="-1" aria-labelledby="dlgAgregarLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="dlgAgregarLabel">Agregar colaboradores</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
<!-- Selector de vistas -->
<div class="mb-3">
  <div class="btn-group" role="group" aria-label="Método de alta">
    <button type="button" class="btn btn-outline-primary active" data-view="qbo" id="btnViewQbo">QBO</button>
    <button type="button" class="btn btn-outline-primary" data-view="manual" id="btnViewManual">Manual</button>
    <button type="button" class="btn btn-outline-primary" data-view="excel" id="btnViewExcel">Excel</button>
  </div>
</div>

<!-- Vista QBO -->
<div id="view-qbo">
  <div class="alert alert-info" id="qboNotice" style="display:none;"></div>
  <div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-secondary" id="btnFetchQbo">Traer de QBO</button>
    <div class="spinner-border spinner-border-sm text-secondary" role="status" id="qboSpinner" style="display:none;">
      <span class="visually-hidden">Cargando…</span>
    </div>
  </div>
  <div class="table-responsive" style="max-height: 350px; overflow:auto;">
    <table class="table table-sm table-striped" id="tblQbo">
      <thead>
  <tr>
    <th>Cédula<span class="text-danger">*</span></th>
    <th>Nombre<span class="text-danger">*</span></th>
    <th>Apellido<span class="text-danger">*</span></th>
    <th>Fecha ingreso</th>
    <th>Email</th>
    <th>Teléfono</th>
    <th>Salario mensual<span class="text-danger">*</span></th>
    <th>Sector<span class="text-danger">*</span></th>
    <th>Cargo<span class="text-danger">*</span></th>
    <th>CCSS<span class="text-danger">*</span></th>
    <th>INS<span class="text-danger">*</span></th>
    <th class="pct-col"># %1</th>
    <th class="pct-col"># %2</th>
    <th class="pct-col"># %3</th>
    <th class="pct-col"># %4</th>
  </tr>
</thead>
      <tbody>
        <tr><td colspan="4" class="text-muted">Sin datos. Presione “Traer de QBO”.</td></tr>
      </tbody>
    </table>
  </div>
</div>

<!-- Vista Manual -->
<div id="view-manual" class="d-none">
  <form id="frmManual" class="row g-3">
    <div class="col-md-3">
      <label class="form-label">Cédula</label>
      <input type="text" class="form-control" id="mnNationalId" maxlength="50" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Nombre</label>
      <input type="text" class="form-control" id="mnFirstName" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Apellido</label>
      <input type="text" class="form-control" id="mnLastName" required />
    </div>
    <div class="col-md-3">
      <label class="form-label">Fecha ingreso</label>
      <input type="date" class="form-control" id="mnJoinDate" />
    </div>

    <div class="col-md-4">
      <label class="form-label">Email</label>
      <input type="email" class="form-control" id="mnEmail" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Teléfono</label>
      <input type="text" class="form-control" id="mnPhone" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Salario mensual</label>
      <input type="number" class="form-control" id="mnSalary" step="0.01" min="0" />
    </div>

    <div class="col-md-4">
      <label class="form-label">Sector</label>
      <input type="text" class="form-control" id="mnSector" placeholder="(coincidir con sectores parametrizados)" />
    </div>
    <div class="col-md-4">
      <label class="form-label">Cargo</label>
      <input type="text" class="form-control" id="mnJob" />
    </div>
    <div class="col-md-4 d-flex align-items-end gap-3">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="mnCcss">
        <label class="form-check-label" for="mnCcss">CCSS</label>
      </div>
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="mnIns">
        <label class="form-check-label" for="mnIns">INS</label>
      </div>
    </div>

    <div class="col-12">
      <label class="form-label">Porcentajes de pago (la suma debe ser 100)</label>
      <div class="row g-2">
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct1" min="0" max="100" step="0.01" placeholder="%1" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct2" min="0" max="100" step="0.01" placeholder="%2" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct3" min="0" max="100" step="0.01" placeholder="%3" />
        </div>
        <div class="col-6 col-md-3">
          <input type="number" class="form-control pct" id="mnPct4" min="0" max="100" step="0.01" placeholder="%4" />
        </div>
      </div>
      <small class="text-muted">Mensual: use solo %1=100. Quincenal: use %1/%2 (p.ej. 50/50). Semanal: distribuya %1–%4. </small>
      <div class="mt-1">
        <span>Suma actual: </span>
        <span id="sumPct" class="badge bg-secondary">0</span>
      </div>
    </div>

    <div class="col-12">
      <button type="button" class="btn btn-primary" id="btnManualSubmit">Guardar (stub)</button>
      <span class="ms-2 text-muted">Crea/matchea en QBO y (aún) no persiste en BD.</span>
    </div>
  </form>

  <div class="mt-3" id="manualMsg" style="display:none;"></div>
</div>

<!-- Vista Excel -->
<div id="view-excel" class="d-none">
  <p class="text-muted">Cargue colaboradores de forma masiva. Use la plantilla (o genere una mínima aquí) y pegue el CSV debajo.</p>
  <div class="d-flex gap-2 mb-2">
    <button type="button" class="btn btn-outline-secondary" id="btnGenCsv">Descargar plantilla mínima</button>
    <button type="button" class="btn btn-primary" id="btnUploadCsv">Procesar CSV (stub)</button>
  </div>
  <textarea id="csvText" class="form-control" rows="8" placeholder="Encabezados esperados: NationalId,FirstName,LastName,Email,Phone"></textarea>
  <div class="mt-3" id="uploadMsg" style="display:none;"></div>
</div>

<script>
window.addEventListener('error', (e) => {
  try {
    console.error('[Colab] global error handler:', { message: e.message, filename: e.filename, lineno: e.lineno, colno: e.colno, error: e.error });
  } catch(_) {}
});
console.log('[Colab] boot: script tag parsed');

  const COMPANY_ID = @(Model.CompanyId ?? 0);
  const LINKED     = @(Model.IsCompanyLinked.ToString().ToLower());
  const SECTORS    = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.SectorNames ?? new List<string>{"General"}));
  const PERIOD     = "@(Model.Periodo ?? "Mensual")";
  const PCT_SLOTS  = (PERIOD === "Mensual" ? 1 : (PERIOD === "Quincenal" ? 2 : 4));
  console.log("[Colab] consts:", { COMPANY_ID, LINKED, PERIOD, PCT_SLOTS });
(() => {
  // --- helpers ---
  const qs  = (sel) => document.querySelector(sel);
  const qsa = (sel) => Array.from(document.querySelectorAll(sel));
  const show = (el) => el && (el.style.display = "");
  const hide = (el) => el && (el.style.display = "none");
  const addClass = (el, cls) => el && el.classList.add(cls);
  const remClass = (el, cls) => el && el.classList.remove(cls);

  // Vistas (pestañas)
  const views = { qbo: qs("#view-qbo"), manual: qs("#view-manual"), excel: qs("#view-excel") };
  function switchView(name) {
    Object.entries(views).forEach(([k,el]) => { if (!el) return; (k===name)? remClass(el,"d-none") : addClass(el,"d-none"); });
    qsa('[data-view]').forEach(b => (b.getAttribute('data-view')===name? addClass(b,"active") : remClass(b,"active")));
    if (name === "manual") setPctVisibility();
    if (name === "qbo") setQboReadyState();
  }

  // ---------- QBO ----------
  const btnFetchQbo = qs("#btnFetchQbo");
  const qboSpinner  = qs("#qboSpinner");
  const qboNotice   = qs("#qboNotice");
  const tblQboBody  = () => qs("#tblQbo tbody");
let QBO_LIST = [];

function sectorOptions(selected) {
  if (!Array.isArray(SECTORS) || SECTORS.length === 0) return `<option value="">(Definir sectores)</option>`;
  return SECTORS.map(s => `<option value="${s}" ${s===selected? "selected": ""}>${s}</option>`).join("");
}

function defaultPctSlots() {
  // Usa PERIOD y PCT_SLOTS (constantes ya definidas arriba en tu página)
  if (PERIOD?.toLowerCase() === "mensual")   return [100,0,0,0].slice(0,PCT_SLOTS);
  if (PERIOD?.toLowerCase() === "quincenal") return [50,50,0,0].slice(0,PCT_SLOTS);
  // Semanal / otro: repartir equitativo
  const n = Math.max(1, PCT_SLOTS||1); const v = Math.round(10000/n)/100; // 2 dec.
  return Array.from({length:n}, (_,i)=> i===n-1 ? 100 - v*(n-1) : v).concat([0,0,0]).slice(0,4);
}

function splitName(given, family, display) {
  let first = (given||"").trim(), last = (family||"").trim();
  if (!first || !last) {
    const parts = (display||"").trim().split(/\s+/);
    if (!first && parts.length) first = parts.shift();
    if (!last && parts.length)  last  = parts.join(" ");
  }
  return { first: first||"", last: last||"" };
}

function qboRowTpl(e) {
  const name = splitName(e.givenName, e.familyName, e.displayName);
  const pct = defaultPctSlots(); // array con 1..PCT_SLOTS
  const ccssChecked = ""; // por defecto vacío (usuario decide)
  const insChecked  = "";
  const sector = (SECTORS && SECTORS[0]) || "";

  return `
  <tr>
    <td><input class="form-control form-control-sm nationalId" placeholder="Cédula" value=""></td>
    <td><input class="form-control form-control-sm firstName"  placeholder="Nombre"  value="${name.first}"></td>
    <td><input class="form-control form-control-sm lastName"   placeholder="Apellido" value="${name.last}"></td>
    <td><input class="form-control form-control-sm joinDate"   type="date" value=""></td>
    <td><input class="form-control form-control-sm email"      type="email" placeholder="email@dominio" value="${e.email||""}"></td>
    <td><input class="form-control form-control-sm phone"      type="tel"   placeholder="" value="${e.phone||""}"></td>
    <td><input class="form-control form-control-sm baseSalary" type="number" step="0.01" min="0" placeholder="0.00"></td>
    <td><select class="form-select form-select-sm sector">${sectorOptions(sector)}</select></td>
    <td><input class="form-control form-control-sm jobTitle"   placeholder="Cargo"></td>
    <td class="text-center"><input class="form-check-input ccss" type="checkbox" ${ccssChecked}></td>
    <td class="text-center"><input class="form-check-input ins"  type="checkbox" ${insChecked}></td>
    <td><input class="form-control form-control-sm pct1" type="number" step="0.01" value="${pct[0]??0}"></td>
    <td><input class="form-control form-control-sm pct2" type="number" step="0.01" value="${pct[1]??0}"></td>
    <td><input class="form-control form-control-sm pct3" type="number" step="0.01" value="${pct[2]??0}"></td>
    <td><input class="form-control form-control-sm pct4" type="number" step="0.01" value="${pct[3]??0}"></td>
  </tr>`;
}

// Colector (por si lo necesitas ya)
function qboCollectRows() {
  const rows = [];
  tblQboBody()?.querySelectorAll("tr")?.forEach(tr => {
    const get = sel => tr.querySelector(sel);
    const num = sel => { const v = parseFloat(get(sel)?.value?.replace(",", ".")||""); return isNaN(v)? null : v; };
    rows.push({
      nationalId:  get(".nationalId")?.value?.trim()||"",
      firstName:   get(".firstName")?.value?.trim()||"",
      lastName:    get(".lastName")?.value?.trim()||"",
      joinDate:    get(".joinDate")?.value||null,
      email:       get(".email")?.value?.trim()||null,
      phone:       get(".phone")?.value?.trim()||null,
      baseSalary:  num(".baseSalary"),
      sector:      get(".sector")?.value||"",
      jobTitle:    get(".jobTitle")?.value?.trim()||"",
      hasCcss:     !!get(".ccss")?.checked,
      hasIns:      !!get(".ins")?.checked,
      payPct1:     num(".pct1")||0,
      payPct2:     num(".pct2")||0,
      payPct3:     num(".pct3")||0,
      payPct4:     num(".pct4")||0
    });
  });
  return rows;
}

  function setQboReadyState() {
    if (!COMPANY_ID || !LINKED) {
      show(qboNotice); qboNotice.className = "alert alert-warning";
      qboNotice.textContent = !COMPANY_ID ? "Seleccione una empresa en el header para habilitar QBO."
                                          : "Esta empresa no está vinculada a QBO.";
      if (btnFetchQbo) btnFetchQbo.disabled = true;
    } else {
      hide(qboNotice); if (btnFetchQbo) btnFetchQbo.disabled = false;
    }
  }

  async function fetchQboEmployees() {
    console.log("[Colab] fetchQboEmployees", { COMPANY_ID, LINKED });
    if (!COMPANY_ID || !LINKED) return;
    if (qboSpinner) show(qboSpinner);
    try {
      const url  = `/payroll/api/qbo/employees?companyId=${COMPANY_ID}&includeInactive=false`;
      const resp = await fetch(url, { method: "GET" });
      const data = await resp.json();
      const tb   = tblQboBody(); if (!tb) return;
      tb.innerHTML = "";
      if (!Array.isArray(data) || data.length === 0) {
        tb.innerHTML = `<tr><td colspan="4" class="text-muted">No se recibieron colaboradores desde QBO.</td></tr>`;
        return;
      }
      QBO_LIST = data;
      tb.innerHTML = data.map(e => qboRowTpl(e)).join("");
    } catch (err) {
      const tb = tblQboBody(); if (tb) tb.innerHTML = `<tr><td colspan="4" class="text-danger">Error obteniendo QBO: ${err}</td></tr>`;
    } finally {
      if (qboSpinner) hide(qboSpinner);
    }
  }
  if (btnFetchQbo) btnFetchQbo.addEventListener("click", fetchQboEmployees);
  setQboReadyState();

  // ---------- Manual (stubs seguros para no romper) ----------
  function setPctVisibility(){ /* no-op base; tu versión avanzada puede vivir aquí si la necesitas */ }
  function addRow(){ /* no-op */ }
  function collectRows(){ return []; }
  async function saveRows(){ /* no-op */ }

  // ---------- Excel (deja tus handlers existentes si están fuera, esto no choca) ----------

  // Wiring de tabs + delegación de respaldo
  qsa('[data-view]').forEach(b => b.addEventListener('click', () => switchView(b.getAttribute('data-view'))));
  document.addEventListener('click', (ev) => {
    const t = ev.target.closest('[data-view]');
    if (t) { ev.preventDefault(); switchView(t.getAttribute('data-view')); }
    if (ev.target.closest('#btnFetchQbo')) { ev.preventDefault(); fetchQboEmployees(); }
  });

  // Vista por defecto
  switchView("qbo");
})();
</script>
<div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-primary" disabled>Continuar</button>
      </div>
    </div>
  </div>
</div>




















  
function qboIsActive(){ return !document.querySelector("#view-qbo")?.classList.contains("d-none"); }
function markInvalid(el, bad){ if(!el) return; el.classList.toggle("is-invalid", !!bad); }

function qboValidateAndContinue(ev){
  if (!qboIsActive()) return; // otra pestaña: no interferir
  ev?.preventDefault();

  const rows = qboCollectRows();
  const notice = document.querySelector("#qboNotice");
  const tb = document.querySelector("#tblQbo tbody");

  // reset visual
  tb?.querySelectorAll(".is-invalid").forEach(x=> x.classList.remove("is-invalid"));

  if (!rows || rows.length===0) {
    if (notice){ notice.className="alert alert-danger"; notice.textContent="No hay filas para continuar."; notice.style.display=""; }
    return;
  }

  const EPS = 0.01;
  let idx = 0;
  for (const tr of tb.querySelectorAll("tr")) {
    const get = sel => tr.querySelector(sel);
    const num = sel => { const v = parseFloat(get(sel)?.value?.replace(",", ".")||""); return isNaN(v)? 0 : v; };

    const nationalId = get(".nationalId");
    const firstName  = get(".firstName");
    const lastName   = get(".lastName");
    const baseSalary = get(".baseSalary");
    const sector     = get(".sector");
    const jobTitle   = get(".jobTitle");
    const ccss       = get(".ccss");
    const ins        = get(".ins");

    const slots = (typeof PCT_SLOTS!=="undefined" && PCT_SLOTS) ? PCT_SLOTS : 1;
    const pct = [num(".pct1"),num(".pct2"),num(".pct3"),num(".pct4")].slice(0, slots);
    const sum = pct.reduce((a,b)=>a+b,0);

    const bad =
      !(nationalId?.value?.trim()) ||
      !(firstName?.value?.trim())  ||
      !(lastName?.value?.trim())   ||
      !sector?.value               ||
      !(jobTitle?.value?.trim())   ||
      !(parseFloat(baseSalary?.value||"0")>0) ||
      !ccss?.checked || !ins?.checked ||
      Math.abs(sum - 100) > EPS;

    markInvalid(nationalId, !(nationalId?.value?.trim()));
    markInvalid(firstName,  !(firstName?.value?.trim()));
    markInvalid(lastName,   !(lastName?.value?.trim()));
    markInvalid(baseSalary, !(parseFloat(baseSalary?.value||"0")>0));
    markInvalid(sector,     !sector?.value);
    markInvalid(jobTitle,   !(jobTitle?.value?.trim()));
    if (!ccss?.checked) ccss?.classList.add("is-invalid");
    if (!ins?.checked)  ins?.classList.add("is-invalid");

    // marcar % visibles
    ["1","2","3","4"].forEach((k,i)=>{
      const inp = get(".pct"+k);
      if (i >= slots) { if (inp) inp.classList.remove("is-invalid"); }
      else if (inp) { const v = parseFloat(inp.value||""); markInvalid(inp, isNaN(v)); }
    });

    if (bad) {
      if (notice){
        notice.className = "alert alert-danger";
        notice.innerHTML = `Fila ${idx+1}: complete los obligatorios y verifique que la suma de % sea 100. (Actual: ${sum.toFixed(2)})`;
        notice.style.display="";
      }
      return;
    }
    idx++;
  }

  if (notice){ notice.className="alert alert-success"; notice.textContent="Validación OK. Listo para enviar."; notice.style.display=""; }
  // Aquí podrías hacer el POST con qboCollectRows() cuando quieras.
}

// Delegación para “Continuar” (botón primario del modal)
document.addEventListener("click", (ev) => {
  const cont = ev.target.closest("#dlgAgregar .modal-footer .btn-primary");
  if (cont && qboIsActive()) qboValidateAndContinue(ev);
});

// Asegurar visibilidad de % al cargar (si está definida)
try { if (typeof qboApplyPctVisibility === "function") qboApplyPctVisibility(); } catch(_) {}
