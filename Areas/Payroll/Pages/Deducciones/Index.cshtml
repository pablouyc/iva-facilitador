@page
@model IvaFacilitador.Areas.Payroll.Pages.Deducciones.IndexModel
@{
    ViewData["Title"] = "Deducciones";
    ViewData["PayrollSection"] = "Deducciones";
    ViewData["Wide"] = "true";
}
@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")

@section Styles{
<style>
  :root{
    --pt-ink:#232d32; --pt-brand:#0b5c6b;
    --pt-border:#e7ebee; --pt-border-strong:#d6dde2;
    --pt-row:#fbfcfd; --pt-hover:#f2f6f8;
  }
  .pt-wrap > .card{ border:1px solid var(--pt-border); border-radius:14px; box-shadow:0 6px 22px rgba(2,52,63,.08); }
  .pt-wrap > .card .card-body{ padding:1rem 1rem 1.25rem; }
  .badge-mono{ background:#fff; border:1px solid var(--pt-border); color:var(--pt-ink); font-weight:500; padding:.35rem .55rem; border-radius:999px; }
  .pt-table-wrap{ overflow:visible; }
  .pt-table{ border-collapse:separate; border-spacing:0; width:100%; }
  .pt-table thead th{ position:sticky; top:0; z-index:2; background:linear-gradient(180deg, rgba(2,52,63,.045), #fff 60%);
    color:var(--pt-brand); font-weight:700; letter-spacing:.15px; border-bottom:1px solid var(--pt-border-strong); }
  .pt-table th,.pt-table td{ white-space:nowrap; border-top:1px solid var(--pt-border); padding:.35rem .5rem; vertical-align:middle; }
  .pt-table tbody tr:nth-child(even){ background:var(--pt-row); }
  .pt-table tbody tr:hover{ background:var(--pt-hover); box-shadow: inset 0 1px 0 rgba(2,52,63,.06), inset 0 -1px 0 rgba(2,52,63,.06); }
  .pt-table thead th + th, .pt-table tbody td + td{ box-shadow: inset 1px 0 0 var(--pt-border); }
  .pt-cell-money{ text-align:right; font-variant-numeric:tabular-nums; }
  .pt-cell-money.fw-semibold{ color:#0b5c6b; }
  .pt-sticky{ position:sticky; bottom:0; background:#fff; }
  .pt-sticky th,.pt-sticky td{ background:#fff; border-top:2px solid var(--pt-border-strong); box-shadow:0 -4px 10px rgba(2,52,63,.06); }
  /* Embudo minimal gris */
  .pt-filter-btn{ border:0; background:transparent; padding:0 .25rem; line-height:1; cursor:pointer; color:#adb5bd; opacity:.9; }
  .pt-filter-btn:hover,.pt-filter-btn:focus,.pt-filter-btn.active{ color:var(--pt-brand); opacity:1; }
  .pt-filter-btn::before{
    content:""; display:inline-block; width:14px; height:14px; vertical-align:-2px; background:currentColor;
    -webkit-mask:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="currentColor" d="M1 2h14l-5.5 6v5l-3 2v-7z"/></svg>') no-repeat center/contain;
            mask:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="currentColor" d="M1 2h14l-5.5 6v5l-3 2v-7z"/></svg>') no-repeat center/contain;
  }
  .pt-filter-menu{
    position:fixed; top:0; left:0; width:260px; max-height:60vh; overflow:auto; background:#fff; border:1px solid var(--pt-border-strong);
    border-radius:10px; box-shadow:0 18px 40px rgba(2,52,63,.16); z-index:1200; display:none;
  }
  .pt-filter-menu .fm-head{ padding:.5rem .5rem .25rem; border-bottom:1px solid var(--pt-border); }
  .pt-filter-menu .fm-list{ max-height:40vh; overflow:auto; padding:.25rem .5rem; }
  .pt-filter-menu .fm-actions{ display:flex; gap:.5rem; justify-content:flex-end; padding:.5rem; border-top:1px solid var(--pt-border); }
  .clip-ic::before{ content:"ðŸ“Ž"; font-size:14px; }
  .x-actions .btn{ padding:.2rem .45rem; }
</style>
}

<div class="pt-wrap">
  <div class="pt-meta mb-2">
    <span class="badge badge-mono">Periodo: @Model!.PeriodoLabel</span>
    @if (!string.IsNullOrWhiteSpace(Model.CompanyIdRaw)){ <span class="badge badge-mono">Empresa: @Model.CompanyIdRaw</span> }
  </div>

  <div class="card">
    <div class="card-body">
      <div class="pt-table-wrap">
        <table class="table table-sm table-hover align-middle pt-table" id="tbl-deducciÃ³ns">
          <thead>
            <tr>
              <th>Fecha <button type="button" class="pt-filter-btn" data-key="fecha" data-type="date" aria-label="Filtrar"></button></th>
              <th>Colaborador <button type="button" class="pt-filter-btn" data-key="colaborador" data-type="text" aria-label="Filtrar"></button></th>
              <th>IdentificaciÃ³n <button type="button" class="pt-filter-btn" data-key="identificacion" data-type="text" aria-label="Filtrar"></button></th>
              <th>Cargo <button type="button" class="pt-filter-btn" data-key="cargo" data-type="text" aria-label="Filtrar"></button></th>
              <th>Sector <button type="button" class="pt-filter-btn" data-key="sector" data-type="text" aria-label="Filtrar"></button></th>
              <th class="text-end">Salario mensual</th>
              <th class="text-end">Salario quincena</th>
              <th class="text-end">Extra <button type="button" class="pt-filter-btn" data-key="monto" data-type="num" aria-label="Filtrar"></button></th>
              <th>Tipo <button type="button" class="pt-filter-btn" data-key="tipo" data-type="text" aria-label="Filtrar"></button></th>
              <th>Motivo <button type="button" class="pt-filter-btn" data-key="motivo" data-type="text" aria-label="Filtrar"></button></th>
              <th class="text-center">Acciones</th>
            </tr>
          </thead>
          <tbody id="pt-body">
@* estado vacÃ­o *@
@if (!(Model.Rows?.Any() ?? false)) {
  <tr>
    <td colspan="11" class="text-center text-muted py-4">
      No hay movimientos para el perÃ­odo seleccionado.
    </td>
  </tr>
}@{ var __hasRows = (Model?.Rows != null); } @if (__hasRows) { @foreach (var r in Model!.Rows!)
{
  <tr class="data-row"
      data-fecha="@r.Date.ToString("yyyy-MM-dd")"
      data-colaborador="@r.Colaborador"
      data-identificacion="@r.NationalId"
      data-cargo="@r.Cargo"
      data-sector="@r.Sector"
      data-monto="@r.AmountInvariant"
      data-tipo="@r.ItemName"
      data-motivo="@r.NotePlain">
    <td>@r.Date.ToString("yyyy-MM-dd")</td>
    <td>@r.Colaborador</td>
    <td>@r.NationalId</td>
    <td>@(string.IsNullOrWhiteSpace(r.Cargo)?"â€”":r.Cargo)</td>
    <td>@(string.IsNullOrWhiteSpace(r.Sector)?"â€”":r.Sector)</td>
    <td class="pt-cell-money">@Model!.Money(r.SalarioMensual)</td>
    <td class="pt-cell-money">@Model!.Money(r.SalarioQuincena)</td>
    <td class="pt-cell-money">
      @Model!.Money(r.Amount)
      @if(!string.IsNullOrWhiteSpace(r.NotePlain)){ <span class="ms-1 clip-ic" title="Tiene nota"></span> }
    </td>
    <td>@r.ItemName</td>
    <td>@(string.IsNullOrWhiteSpace(r.NotePlain)?"â€”":r.NotePlain)</td>
    <td class="text-center x-actions">
      <button type="button" class="btn btn-sm btn-outline-primary btn-edit"
              data-id="@r.Id" data-date="@r.Date.ToString("yyyy-MM-dd")" data-emp="@r.EmployeeId"
              data-item="@r.ItemId" data-amount="@r.AmountInvariant" data-note="@r.NotePlain">Editar</button>
    </td>
  </tr>
}
}
</tbody>
          <tfoot class="pt-sticky">
            <tr>
              <th colspan="7" class="text-end">Total deducciÃ³ns visibles</th>
              <th class="pt-cell-money fw-semibold" id="tot-monto"></th>
              <th colspan="3"></th>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Modal Agregar / Editar -->
<div class="modal fade" id="mvModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header"><h5 class="modal-title" id="mvTitle">Agregar deducciÃ³n</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button></div>
      <div class="modal-body">
        <form method="post" id="mvForm">
          <input type="hidden" name="handler" value="Add" />
          <input type="hidden" name="ReturnToQuery" value="@Model!.QueryRaw" />
          <input type="hidden" name="Id" id="mvId" value="" />
          <div class="mb-2">
            <label class="form-label">Fecha</label>
            <input type="date" name="Date" id="mvDate" class="form-control" required />
          </div>
          <div class="mb-2">
            <label class="form-label">Colaborador</label>
            <select name="EmployeeId" id="mvEmp" class="form-select" required>
              <option value="">â€” Seleccione â€”</option>
@foreach (var e in Model!.Employees){ <option value="@e.Value">@e.Text</option> }
            </select>
          </div>
          <div class="mb-2">
            <label class="form-label">Tipo</label>
            <select name="ItemId" id="mvItem" class="form-select" required>
              <option value="">â€” Seleccione â€”</option>
@foreach (var it in Model!.Items){ <option value="@it.Value">@it.Text</option> }
            </select>
          </div>
          <div class="mb-2">
            <label class="form-label">Monto</label>
            <input type="number" step="0.01" name="Amount" id="mvAmount" class="form-control" required />
          </div>
          <div class="mb-2">
            <label class="form-label">Motivo</label>
            <textarea name="Note" id="mvNote" maxlength="500" class="form-control" rows="3" placeholder="MÃ¡ximo 500 caracteres"></textarea>
          </div>
          <div class="mb-2">
            <label class="form-label">Adjuntos</label>
            <input type="text" class="form-control" value="(prÃ³ximamente)" disabled />
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button id="btnDelete" type="button" class="btn btn-outline-danger me-auto d-none">Eliminar deducciÃ³n</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
        <button id="btnSave" type="submit" form="mvForm" class="btn btn-primary">Guardar</button>
      </div>
    </div>
  </div>
</div>

@section Scripts{
<script>
(function(){
  const approved = (new URLSearchParams(location.search).get('status')||'').toLowerCase().startsWith('aprob');
  const form = document.getElementById('payroll-range-form');
  // Insertar botÃ³n "Agregar" junto al filtro de fechas
  if(form){
    const col = document.createElement('div');
    col.className = 'col-auto d-flex align-items-end';
    col.innerHTML = '<button id="btnAdd" type="button" class="btn btn-sm btn-success">Agregar deducciÃ³n</button>';
    form.appendChild(col);
    if(approved){
      col.querySelector('#btnAdd').classList.add('disabled');
      col.querySelector('#btnAdd').title = 'Periodo aprobado: bloqueado';
    }
    col.querySelector('#btnAdd').addEventListener('click', openAdd);
  }

  // Filtros (embudo)
  const btns = document.querySelectorAll('.pt-filter-btn');
  let menu; let currentKey=null, currentBtn=null;
  function ensureMenu(){
    if(menu) return;
    menu=document.createElement('div'); menu.className='pt-filter-menu'; document.body.appendChild(menu);
    document.addEventListener('click', (ev)=>{ if(!menu.contains(ev.target) && ev.target!==currentBtn){ menu.style.display='none'; } });
  }
  function getUnique(key){
    const s=new Set(); document.querySelectorAll('tbody .data-row').forEach(tr=>{ s.add((tr.dataset[key]||'').trim())}); return Array.from(s).filter(x=>x!=='' );
  }
  function openMenuFor(btn){
    ensureMenu();
    currentBtn=btn; currentKey = btn.dataset.key;
    let type = btn.dataset.type||'text';
    let html = '';
    if(type==='text'){
      const opts = getUnique(currentKey).sort((a,b)=>a.localeCompare(b));
      html += '<div class="fm-head"><input id="fm-search" class="form-control form-control-sm" placeholder="Buscar..."></div>';
      html += '<div class="fm-list">';
      opts.forEach(o=>{ html += '<label class="form-check"><input class="form-check-input fm-cb" type="checkbox" value="'+o+'"><span class="form-check-label">'+o+'</span></label>'; });
      html += '</div>';
    } else if(type==='num'){
      html += '<div class="fm-head"><div class="row g-2"><div class="col"><input id="fm-min" type="number" step="0.01" class="form-control form-control-sm" placeholder="MÃ­n"></div><div class="col"><input id="fm-max" type="number" step="0.01" class="form-control form-control-sm" placeholder="MÃ¡x"></div></div></div>';
    } else if(type==='date'){
      html += '<div class="fm-head"><div class="row g-2"><div class="col"><input id="fm-d1" type="date" class="form-control form-control-sm"></div><div class="col"><input id="fm-d2" type="date" class="form-control form-control-sm"></div></div></div>';
    }
    html += '<div class="fm-actions"><button id="fm-clear" class="btn btn-sm btn-outline-secondary" type="button">Limpiar</button><button id="fm-apply" class="btn btn-sm btn-primary" type="button">Aplicar</button></div>';
    menu.innerHTML = html;
    const r = btn.getBoundingClientRect();
    menu.style.left = Math.max(8, Math.min(window.innerWidth-280, r.left)) + 'px';
    menu.style.top  = (r.bottom + 6) + 'px';
    menu.style.display='block';

    menu.querySelector('#fm-apply').onclick = ()=>{ applyFilter(type); menu.style.display='none'; btn.classList.add('active'); recalcTotals(); };
    menu.querySelector('#fm-clear').onclick = ()=>{ clearFilter(btn.dataset.key); menu.style.display='none'; btn.classList.remove('active'); recalcTotals(); };
    if(type==='text'){
      const search = menu.querySelector('#fm-search');
      search?.addEventListener('input', ()=>{
        const q = (search.value||'').toLowerCase();
        menu.querySelectorAll('.fm-cb').forEach(cb=>{
          const lab = cb.nextElementSibling?.textContent?.toLowerCase()||'';
          cb.closest('label').style.display = lab.includes(q)?'':'none';
        });
      });
    }
  }
  // Filtros almacenados en memoria
  const active = {};
  function applyFilter(type){
    if(type==='text'){
      const vals = Array.from(menu.querySelectorAll('.fm-cb:checked')).map(x=>x.value);
      active[currentKey] = {type, vals};
    } else if(type==='num'){
      const min = menu.querySelector('#fm-min').value, max = menu.querySelector('#fm-max').value;
      active[currentKey] = {type, min, max};
    } else if(type==='date'){
      const d1 = menu.querySelector('#fm-d1').value, d2 = menu.querySelector('#fm-d2').value;
      active[currentKey] = {type, d1, d2};
    }
    filterRows();
  }
  function clearFilter(key){
    delete active[key]; filterRows();
  }
  function test(tr, key, rule){
    const v = (tr.dataset[key]||'').trim();
    if(rule.type==='text'){ return !rule.vals || rule.vals.length===0 || rule.vals.includes(v); }
    if(rule.type==='num'){
      const n = parseFloat(v||''); if(Number.isNaN(n)) return false;
      if(rule.min && n < parseFloat(rule.min)) return false;
      if(rule.max && n > parseFloat(rule.max)) return false;
      return true;
    }
    if(rule.type==='date'){
      if(rule.d1 && v < rule.d1) return false;
      if(rule.d2 && v > rule.d2) return false;
      return true;
    }
    return true;
  }
  function filterRows(){
    const rows = document.querySelectorAll('#pt-body .data-row');
    rows.forEach(tr=>{
      let ok = true;
      for(const k in active){ if(!test(tr, k, active[k])){ ok=false; break; } }
      tr.style.display = ok? '' : 'none';
    });
  }
  btns.forEach(b=> b.addEventListener('click', (e)=>{ e.stopPropagation(); openMenuFor(b); }));

  // Totales
  function recalcTotals(){
    let sum = 0;
    document.querySelectorAll('#pt-body .data-row').forEach(tr=>{
      if(tr.style.display==='none') return;
      const n = parseFloat(tr.dataset.monto||'0'); if(!Number.isNaN(n)) sum += n;
    });
    const el = document.getElementById('tot-monto'); if(el) el.textContent = new Intl.NumberFormat('es-CR',{style:'currency',currency:'CRC',maximumFractionDigits:2}).format(sum);
  }
  recalcTotals();

  // Modal add/edit
  const mv = document.getElementById('mvModal');
  let bsModal = null;
  function ensureModal(){ if(!bsModal){ try{ bsModal = bootstrap.Modal.getOrCreateInstance(mv); }catch(e){ alert('Bootstrap no disponible'); } } }
  function openAdd(){
    if(approved) return;
    ensureModal();
    document.getElementById('mvTitle').textContent = 'Agregar deducciÃ³n';
    document.querySelector('#mvForm [name=handler]').value='Add';
    document.getElementById('mvId').value='';
    (document.getElementById('mvDate')).value = (new URLSearchParams(location.search).get('from')||'');
    document.getElementById('mvEmp').value='';
    document.getElementById('mvItem').value='';
    document.getElementById('mvAmount').value='';
    document.getElementById('mvNote').value='';
    document.getElementById('btnDelete').classList.add('d-none');
    document.getElementById('btnSave').disabled=false;
    bsModal.show();
  }
  function openEdit(btn){
    if(approved) return;
    ensureModal();
    document.getElementById('mvTitle').textContent = 'Editar deducciÃ³n';
    document.querySelector('#mvForm [name=handler]').value='Edit';
    document.getElementById('mvId').value = btn.dataset.id;
    document.getElementById('mvDate').value = btn.dataset.date || '';
    document.getElementById('mvEmp').value = btn.dataset.emp || '';
    document.getElementById('mvItem').value = btn.dataset.item || '';
    document.getElementById('mvAmount').value = btn.dataset.amount || '';
    document.getElementById('mvNote').value = btn.dataset.note || '';
    document.getElementById('btnDelete').classList.remove('d-none');
    document.getElementById('btnSave').disabled=false;
    bsModal.show();
  }
  document.querySelectorAll('.btn-edit').forEach(b=> b.addEventListener('click', ()=> openEdit(b)));
  document.getElementById('btnDelete')?.addEventListener('click', ()=>{
    if(!confirm('Â¿Eliminar este deducciÃ³n?')) return;
    document.querySelector('#mvForm [name=handler]').value='Delete';
    document.getElementById('btnSave').disabled=true;
    document.getElementById('mvForm').submit();
  });

  // Bloqueo de ediciÃ³n cuando aprobado
  if(approved){
    document.querySelectorAll('.btn-edit').forEach(b=>{ b.classList.add('disabled'); b.title='Periodo aprobado: bloqueado'; });
  }
})();
</script>
}





<!-- marker: deducciones-live -->
