@page "{id:int?}"
@model IvaFacilitador.Areas.Payroll.Pages.Parametrizador.IndexModel
@{
    ViewData["Title"] = "Parametrizador de nómina";
    var keys = IvaFacilitador.Areas.Payroll.Pages.Parametrizador.IndexModel.Keys;
}

<h2 class="mb-4">Parametrizador de nómina</h2>

<form method="post">
  <input type="hidden" name="CompanyId" value="@Model.CompanyId" />

  <!-- EMPRESA -->
  <div class="card mb-3">
    <div class="card-header fw-bold">Empresa</div>
    <div class="card-body">
      <div class="row g-3">
        <div class="col-12 col-md-6">
          <label class="form-label">Nombre</label>
          <input name="CompanyName" class="form-control" value="@Model.CompanyName" />
        </div>
        <div class="col-6 col-md-3">
          <label class="form-label">Cédula (ID)</label>
          <input name="Cedula" class="form-control" value="@Model.Cedula" />
        </div>
        <div class="col-6 col-md-3">
          <label class="form-label">Período</label>
          <select class="form-select" name="PeriodoPayroll">
            <option value="Mensual"   selected="@(Model.Periodo=="Mensual")">Mensual</option>
            <option value="Quincenal" selected="@(Model.Periodo=="Quincenal")">Quincenal</option>
            <option value="Semanal"   selected="@(Model.Periodo=="Semanal")">Semanal</option>
          </select>
        </div>
      </div>
      <div class="form-text mt-2">REALMID (QBO): @(Model.RealmId ?? "—")</div>
    </div>
  </div>

  <!-- SECTORES -->
  <div class="card mb-3">
    <div class="card-header fw-bold">Sectores</div>
    <div class="card-body">
      <div id="sectoresList" class="vstack gap-2">
        @for (var i = 0; i < Model.Sectores.Count; i++)
        {
          var s = Model.Sectores[i];
          <div class="input-group sector-row" data-idx="@i">
            <input class="form-control sector-input" name="Sectores" value="@s" />
            <button class="btn btn-outline-danger btn-remove-sector" type="button" title="Eliminar" aria-label="Eliminar sector">✖</button>
          </div>
        }
      </div>
      <button type="button" id="btnAddSector" class="btn btn-outline-secondary mt-2">+ Agregar sector</button>
      <div class="form-text">Puedes dejar solo “General” si no usarás sectores.</div>
    </div>
  </div>

  <!-- CONTABILIDAD -->
  <div class="card mb-3">
    <div class="card-header fw-bold">Contabilidad</div>
    <div class="card-body">
      <div class="form-check form-switch mb-3">
        <input class="form-check-input" type="checkbox" id="chkSplit" name="SplitBySector" @(Model.SplitBySector ? "checked" : null) />
        <label class="form-check-label" for="chkSplit">Separar contabilidad por sectores</label>
      </div>

      <div class="alert alert-info mb-3">
        Define las cuentas para: <strong>SalarioBruto, Extras, CCSS, Deducciones, SalarioNeto</strong>.
      </div>

      <div class="table-responsive">
        <table class="table align-middle">
          <thead>
            <tr>
              <th style="width:160px">Sector</th>
              @foreach (var k in keys) { <th>@k</th> }
            </tr>
          </thead>
          <tbody id="mapBody">
            @{
              var rows = Model.SectorNames;
              var rowIdx = 0;
            }
            @foreach (var sectorName in rows)
            {
                <tr data-row="@rowIdx">
                  <td>
                    <input type="hidden" name="SectorRow_@rowIdx" value="@sectorName" />
                    <span class="sector-name">@sectorName</span>
                  </td>
                  @foreach (var k in keys)
                  {
                    var selectId = $"sel_{rowIdx}_{k}";
                    var selected = Model.SelectedFor(sectorName, k);
                    <td>
                      <select class="form-select acc-select" id="@selectId" name="@($"Map_{rowIdx}_{k}")" data-key="@k">
                        <option value="">(sin seleccionar)</option>
                        @if (Model.Accounts != null && Model.Accounts.Count > 0)
                        {
                          foreach (var a in Model.Accounts)
                          {
                            if (!string.IsNullOrEmpty(selected) && string.Equals(selected, a.Id, StringComparison.Ordinal))
                            {
                              @:<option value="@a.Id" selected>@a.Name</option>
                            }
                            else
                            {
                              @:<option value="@a.Id">@a.Name</option>
                            }
                          }
                        }
                      </select>
                    </td>
                  }
                </tr>
                rowIdx++;
            }
          </tbody>
        </table>
      </div>

      <div class="d-flex gap-2 mt-3">
        <button class="btn btn-primary" formaction="?handler=Save">Guardar</button>
        
        @if (!Model.HasTokens)
        {
          <button class="btn btn-outline-info" formaction="?handler=Connect">Conectar QBO</button>
        }
        <a class="btn btn-light" href="/Payroll/Empresas">Volver</a>
      </div>
    </div>
  </div>
</form>

@section Scripts {
<script>
(function(){
  const splitChk    = document.getElementById('chkSplit');
  const list        = document.getElementById('sectoresList');
  const mapBody     = document.getElementById('mapBody');
  const btnAdd      = document.getElementById('btnAddSector');

  function ensureMinOne(){
    const rows = list.querySelectorAll('.sector-row');
    rows.forEach((r,i)=>{
      const btn = r.querySelector('.btn-remove-sector');
      btn.disabled = (rows.length <= 1);
    });
  }

  function sectorNames(){
    const inputs = list.querySelectorAll('.sector-input');
    const names = [];
    inputs.forEach(i => {
      const v = (i.value||'').trim();
      if(v) names.push(v);
    });
    if(names.length === 0) names.push('General');
    return names;
  }

  function rebuildGrid(){
    const names = splitChk.checked ? sectorNames() : [ sectorNames()[0] || 'General' ];
    const keys  = ["SalarioBruto","Extras","CCSS","Deducciones","SalarioNeto"];

    let html = '';
    names.forEach((name, idx) => {
      html += `<tr data-row="${idx}">
        <td><input type="hidden" name="SectorRow_${idx}" value="${name}"/><span class="sector-name">${name}</span></td>`;
      keys.forEach(k => {
        html += `<td>
          <select class="form-select acc-select" id="sel_${idx}_${k}" name="Map_${idx}_${k}" data-key="${k}">
            <option value="">(sin seleccionar)</option>
          </select>
        </td>`;
      });
      html += `</tr>`;
    });
    mapBody.innerHTML = html;

    // Si ya hay options en alguna lista, replicarlas; si no, cargar vía handler
    const anyOption = document.querySelector('select.acc-select option[value]:not([value=""])');
    if(anyOption){
      let source = null;
      document.querySelectorAll('select.acc-select').forEach(s => { if (s.options.length > 1 && !source) source = s; });
      if(source){
        const copy = Array.from(source.options).slice(1);
        document.querySelectorAll('select.acc-select').forEach(sel=>{
          sel.innerHTML = '<option value="">(sin seleccionar)</option>';
          copy.forEach(op => sel.appendChild(op.cloneNode(true)));
        });
      }
    }else{
      const url = `@Url.Page(null, "Accounts", new { id = Model.CompanyId })`;
      fetch(url)
        .then(r => r.json())
        .then(arr => {
          if(!Array.isArray(arr)) return;
          document.querySelectorAll('select.acc-select').forEach(sel=>{
            sel.innerHTML = '<option value="">(sin seleccionar)</option>';
            arr.forEach(it=>{
              const o = document.createElement('option');
              o.value = it.id || '';
              o.textContent = it.name || '';
              sel.appendChild(o);
            });
          });
        })
        .catch(()=>{});
    }
  }

  splitChk.addEventListener('change', rebuildGrid);

  btnAdd?.addEventListener('click', ()=>{
    const idx = list.querySelectorAll('.sector-row').length;
    const div = document.createElement('div');
    div.className = 'input-group sector-row';
    div.dataset.idx = idx;
    div.innerHTML = `
      <input class="form-control sector-input" name="Sectores" value="Nuevo sector" />
      <button class="btn btn-outline-danger btn-remove-sector" type="button" title="Eliminar">✖</button>`;
    list.appendChild(div);
    ensureMinOne();
    rebuildGrid();
  });

  list.addEventListener('click', (ev)=>{
    if(ev.target.closest('.btn-remove-sector')){
      const row = ev.target.closest('.sector-row');
      if(list.querySelectorAll('.sector-row').length > 1){
        row.remove();
        ensureMinOne();
        rebuildGrid();
      }
    }
  });

  list.addEventListener('input', (ev)=>{
    if(ev.target.classList.contains('sector-input')){
      const idx = Array.from(list.querySelectorAll('.sector-row')).indexOf(ev.target.closest('.sector-row'));
      const tr  = mapBody.querySelector(`tr[data-row="${idx}"]`);
      if(tr){
        const val = ev.target.value || 'General';
        tr.querySelector('.sector-name').textContent = val;
        tr.querySelector(`input[name="SectorRow_${idx}"]`).value = val;
      }
    }
  });

  ensureMinOne();
})();
</script>
}
<!-- persist-sector-account-selections -->
<script>
(function () {
  // Claves que ya usa el servidor
  var KEYS = ["SalarioBruto","Extras","CCSS","Deducciones","SalarioNeto"];

  function companyId() {
    var el = document.querySelector('input[name="CompanyId"]');
    return el ? (el.value || "0") : "0";
  }
  var storageKey = "payroll-param-grid-" + companyId();

  function snapshot() {
    try {
      var map = {};
      document.querySelectorAll('input[name^="SectorRow_"]').forEach(function(inp){
        var idx = inp.name.substring("SectorRow_".length);
        var sec = inp.value || ("Sector " + idx);
        map[sec] = {};
        KEYS.forEach(function(k){
          var sel = document.querySelector('select[name="Map_' + idx + '_' + k + '"]');
          if (sel) map[sec][k] = sel.value || "";
        });
      });
      localStorage.setItem(storageKey, JSON.stringify(map));
    } catch(e) { /* no-op */ }
  }

  function restore() {
    var raw = null, map = null;
    try { raw = localStorage.getItem(storageKey); } catch(e) {}
    if (!raw) return;
    try { map = JSON.parse(raw); } catch(e) { return; }
    if (!map) return;

    document.querySelectorAll('input[name^="SectorRow_"]').forEach(function(inp){
      var idx = inp.name.substring("SectorRow_".length);
      var sec = inp.value || ("Sector " + idx);
      var mm  = map[sec];
      if (!mm) return;
      KEYS.forEach(function(k){
        var sel = document.querySelector('select[name="Map_' + idx + '_' + k + '"]');
        if (sel && mm[k]) { sel.value = mm[k]; }
      });
    });
  }

  // Guarda cada vez que el usuario cambia una cuenta o renombra sector
  document.addEventListener('change', function(ev){
    var n = (ev.target && ev.target.name) || "";
    if (n.startsWith("Map_") || n.startsWith("SectorRow_")) {
      // snapshot inmediato y un restore por si el DOM se reconstruye
      snapshot();
      setTimeout(restore, 0);
    }
  });

  // Observa agregados/eliminados en el DOM para reponer selecciones
  var obs = new MutationObserver(function(){ restore(); });
  obs.observe(document.body, { childList:true, subtree:true });

  // Primer render
  restore();
})();
</script>

