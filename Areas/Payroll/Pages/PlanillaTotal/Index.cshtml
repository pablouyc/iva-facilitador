@page
@model IvaFacilitador.Areas.Payroll.Pages.PlanillaTotal.IndexModel
@{
    ViewData["Title"] = "Planilla total";
    ViewData["PayrollSection"] = "Planilla total";

    ViewData["Wide"] = "true";
}
@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")


@section Styles {
  <style>
    :root{
      --pt-ink:#232d32; --pt-brand:#0b5c6b;
      --pt-border:#e7ebee; --pt-border-strong:#d6dde2;
      --pt-row:#fbfcfd; --pt-hover:#f2f6f8;
      --pt-chip-extra-bg:#ecf8ff; --pt-chip-extra-fg:#0b5c6b;
      --pt-chip-ded-bg:#fff1f3;  --pt-chip-ded-fg:#b4232c;
    }

    /* contenedor */
    .pt-wrap { position: relative; }

    /* tarjeta */
    .pt-wrap > .card{
      border: 1px solid var(--pt-border);
      border-radius: 14px;
      box-shadow: 0 6px 22px rgba(2,52,63,.08);
    }
    .pt-wrap > .card .card-body{ padding: 1rem 1rem 1.25rem; }

    /* meta (periodo, empresa) */
    .pt-meta{ display:flex; gap:.75rem; align-items:center; margin-bottom:.75rem; }
    .badge-mono{
      background:#fff; border:1px solid var(--pt-border);
      color:var(--pt-ink); font-weight:500; padding:.4rem .55rem; border-radius:999px;
    }

    /* tabla */
    .pt-table-wrap{ overflow:auto; }
    .pt-table{ border-collapse: separate; border-spacing:0; width:100%; }
    .pt-table thead th{
      position: sticky; top:0; z-index:2;
      background: linear-gradient(180deg, rgba(2,52,63,.045), #fff 60%);
      color: var(--pt-brand);
      font-weight:700; letter-spacing:.15px;
      border-bottom:1px solid var(--pt-border-strong);
      backdrop-filter:saturate(1.2);
    }
    .pt-table th, .pt-table td{ white-space:nowrap; border-top:1px solid var(--pt-border); }
    .pt-table tbody tr:nth-child(even){ background: var(--pt-row); }
    .pt-table tbody tr:hover{
      background: var(--pt-hover);
      box-shadow: inset 0 1px 0 rgba(2,52,63,.06), inset 0 -1px 0 rgba(2,52,63,.06);
    }

    /* líneas verticales entre columnas */
    .pt-table thead th + th,
    .pt-table tbody td + td{ box-shadow: inset 1px 0 0 var(--pt-border); }

    /* números alineados */
    .pt-cell-money{ text-align:right; font-variant-numeric: tabular-nums; }
    .pt-cell-money.fw-semibold{ color:#0b5c6b; } /* neto */

    /* chips enlaces */
    .pt-table .pop-extras, .pt-table .pop-deds{
      display:inline-block; padding:.15rem .45rem; border-radius:999px;
      text-decoration:none!important; line-height:1.25; border:1px solid transparent;
    }
    .pt-table .pop-extras{ background:var(--pt-chip-extra-bg); color:var(--pt-chip-extra-fg); border-color:rgba(2,52,63,.12); }
    .pt-table .pop-deds  { background:var(--pt-chip-ded-bg);  color:var(--pt-chip-ded-fg);  border-color:rgba(220,53,69,.18); }
    .pt-table .pop-extras:focus, .pt-table .pop-deds:focus{ outline:0; box-shadow:0 0 0 .2rem rgba(2,52,63,.12); }

    /* popovers */
    .popover{ border:1px solid var(--pt-border); box-shadow:0 14px 30px rgba(2,52,63,.18); border-radius:10px; }
    .popover .popover-body{ font-size:.875rem; color:var(--pt-ink); }
  
    /* filtros de cabecera */
    .pt-filter-row th { background:#fff; position:sticky; top:40px; z-index:1; }
    .pt-filter-row input[type="text"]{ width:16ch; }
    .pt-filter-row .nbox{ display:flex; gap:.25rem; align-items:center; }
    .pt-filter-row .nbox input{ width:8ch; }

    /* tfoot sticky */
    .pt-table tfoot.pt-sticky { position: sticky; bottom: 0; background:#fff; }
    .pt-table tfoot.pt-sticky th, .pt-table tfoot.pt-sticky td{
      background:#fff; border-top:2px solid var(--pt-border-strong);
      box-shadow: 0 -4px 10px rgba(2,52,63,.06);
    }

    /* fila subtotal por sector */
    .subtotal-row{ background: var(--pt-row); font-weight:600; }
    .subtotal-label{ text-align:right; color:#0b5c6b; }

    /* filtros tipo Excel */
    .pt-filter-btn{ border:0; background:transparent; padding:0; margin-left:.35rem; opacity:.6; vertical-align:middle; }
    .pt-filter-btn:hover{ opacity:1; }
    .pt-filter-btn .pt-filter-ic{ display:inline-block; fill:#6c757d; }
    .pt-filter-btn.active .pt-filter-ic{ fill: var(--pt-brand); opacity:1; }
    .pt-filter-menu{
      position:absolute; z-index:1055; width:260px; background:#fff;
      border:1px solid var(--pt-border); border-radius:.5rem;
      box-shadow:0 12px 28px rgba(2,52,63,.18); padding:.5rem; display:none;
    }
    .pt-filter-menu .hdr{ display:flex; gap:.5rem; align-items:center; padding:.25rem .25rem .5rem; border-bottom:1px solid var(--pt-border); margin-bottom:.5rem; }
    .pt-filter-menu .hdr input[type="text"]{ flex:1; }
    .pt-filter-menu .list{ max-height:220px; overflow:auto; padding:.25rem; }
    .pt-filter-menu .list .opt{ display:flex; align-items:center; gap:.5rem; padding:.15rem .25rem; border-radius:.25rem; }
    .pt-filter-menu .list .opt:hover{ background:#f8f9fa; }
    .pt-filter-menu .foot{ display:flex; justify-content:flex-end; gap:.5rem; margin-top:.5rem; }
    /* blindaje: mantener ocultos los divs de popover */
    .pt-table .d-none{ display:none !important; }

    /* filtro tipo Excel */
    .pt-filter-btn{
      border:0; background:transparent; padding:0 .25rem; line-height:1;
      opacity:.6; cursor:pointer; font-weight:600;
    }
    .pt-filter-btn:hover{ opacity:1; }
    .pt-filter-btn.active{ color:var(--pt-brand); opacity:1; }

    .pt-filter-menu{
      position:fixed; top:0; left:0; width:260px; max-height:60vh; overflow:auto;
      background:#fff; border:1px solid var(--pt-border-strong); border-radius:10px;
      box-shadow:0 18px 40px rgba(2,52,63,.16); z-index: 1200;
    }
    .pt-filter-menu .fm-head{ padding:.5rem .5rem .25rem; border-bottom:1px solid var(--pt-border); }
    .pt-filter-menu .fm-list{ max-height:40vh; overflow:auto; padding:.25rem .5rem; }
    .pt-filter-menu .fm-actions{ display:flex; gap:.5rem; justify-content:flex-end; padding:.5rem; border-top:1px solid var(--pt-border); }
    .pt-filter-menu .form-check{ margin:.15rem 0; }
  /* pt-compact-cells */
  .pt-table th, .pt-table td{ padding:.35rem .5rem; }
  .pt-table thead th .pt-filter-btn{ margin-left:.25rem; }
/* === PT: embudo + ancho (solo Planilla total) === */
.pt-filter-btn{
  border:0; background:transparent; padding:0 .25rem; line-height:1; cursor:pointer;
  color:#adb5bd; opacity:.9;
}
.pt-filter-btn:hover, .pt-filter-btn:focus, .pt-filter-btn.active{ color:var(--pt-brand); opacity:1; }
.pt-filter-btn::before{
  content:""; display:inline-block; width:14px; height:14px; vertical-align:-2px;
  background:currentColor;
  -webkit-mask:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="currentColor" d="M1 2h14l-5.5 6v5l-3 2v-7z"/></svg>') no-repeat center / contain;
          mask:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill="currentColor" d="M1 2h14l-5.5 6v5l-3 2v-7z"/></svg>') no-repeat center / contain;
}
/* hacer que quepa sin barra horizontal con layout ancho */
.pt-wrap .pt-table-wrap{ overflow:visible; }
</style>
}
<div class="pt-wrap">
  <div class="pt-meta">
    <span class="badge badge-mono">Periodo: @Model.PeriodoLabel</span>
    @if (!string.IsNullOrWhiteSpace(Model.companyId))
    {
        <span class="badge badge-mono">Empresa: @Model.companyId</span>
    }
  </div>

  <div class="card payroll-card">
    <div class="card-body">
      <div class="pt-table-wrap">
        <table class="table table-sm table-hover align-middle pt-table">
          <thead>
  <tr>
    <th>Colaborador <button type="button" class="pt-filter-btn" data-key="colaborador" data-type="text" aria-label="Filtrar"></button></th>
    <th>Identificación <button type="button" class="pt-filter-btn" data-key="identificacion" data-type="text" aria-label="Filtrar"></button></th>
    <th>Cargo <button type="button" class="pt-filter-btn" data-key="cargo" data-type="text" aria-label="Filtrar"></button></th>
    <th>Sector <button type="button" class="pt-filter-btn" data-key="sector" data-type="text" aria-label="Filtrar"></button></th>
    <th class="text-end">Salario mensual <button type="button" class="pt-filter-btn" data-key="mensual" data-type="num" aria-label="Filtrar"></button></th>
    <th class="text-end">Salario quincena <button type="button" class="pt-filter-btn" data-key="quin" data-type="num" aria-label="Filtrar"></button></th>
    <th class="text-end">Extras <button type="button" class="pt-filter-btn" data-key="extras" data-type="num" aria-label="Filtrar"></button></th>
    <th class="text-end">Salario bruto <button type="button" class="pt-filter-btn" data-key="bruto" data-type="num" aria-label="Filtrar"></button></th>
    <th class="text-end">Deducciones <button type="button" class="pt-filter-btn" data-key="deds" data-type="num" aria-label="Filtrar"></button></th>
    <th class="text-end">Salario neto <button type="button" class="pt-filter-btn" data-key="neto" data-type="num" aria-label="Filtrar"></button></th>
  </tr>
</thead>
          <tbody id="pt-body">
@for (var i = 0; i < Model.Rows.Count; i++)
{
    var r = Model.Rows[i];
    <tr class="data-row"
        data-colaborador="@r.Colaborador"
        data-identificacion="@r.Identificacion"
        data-cargo="@r.Cargo"
        data-sector="@r.Sector"
        data-mensual="@(r.SalarioMensual.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-quin="@(r.SalarioQuincena.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-extras="@(r.Extras.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-bruto="@(r.Bruto.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-deds="@(r.Deducciones.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-neto="@(r.Neto.ToString(System.Globalization.CultureInfo.InvariantCulture))">
      <td>@r.Colaborador</td>
      <td>@r.Identificacion</td>
      <td>@r.Cargo</td>
      <td>@r.Sector</td>
      <td class="pt-cell-money">@Model.Money(r.SalarioMensual)</td>
      <td class="pt-cell-money">@Model.Money(r.SalarioQuincena)</td>
      <td class="pt-cell-money">
        <a href="javascript:void(0)" class="link-dark text-decoration-none pop-extras" data-content-id="ex-@i">
          @Model.Money(r.Extras)
        </a>
        <div id="ex-@i" class="d-none">
          <div class="small">
            @foreach (var it in r.ExtrasDetalle)
            {
              <div>@it.Name: <strong>@Model.Money(it.Amount)</strong></div>
            }
            @if (r.ExtrasDetalle.Count == 0)
            {
              <div class="text-muted fst-italic">Sin extras</div>
            }
          </div>
        </div>
      </td>
      <td class="pt-cell-money">@Model.Money(r.Bruto)</td>
      <td class="pt-cell-money">
        <a href="javascript:void(0)" class="link-dark text-decoration-none pop-deds" data-content-id="dd-@i">
          @Model.Money(r.Deducciones)
        </a>
        <div id="dd-@i" class="d-none">
          <div class="small">
            @foreach (var it in r.DeduccionesDetalle)
            {
              <div>@it.Name: <strong>@Model.Money(it.Amount)</strong></div>
            }
            @if (r.DeduccionesDetalle.Count == 0)
            {
              <div class="text-muted fst-italic">Sin deducciones</div>
            }
          </div>
        </div>
      </td>
      <td class="pt-cell-money fw-semibold">@Model.Money(r.Neto)</td>
    </tr>
}
</tbody>
<tfoot class="pt-sticky">
  <tr>
    <th colspan="4" class="subtotal-label">Totales visibles</th>
    <th class="pt-cell-money" id="tot-mensual"></th>
    <th class="pt-cell-money" id="tot-quin"></th>
    <th class="pt-cell-money" id="tot-extras"></th>
    <th class="pt-cell-money" id="tot-bruto"></th>
    <th class="pt-cell-money" id="tot-deds"></th>
    <th class="pt-cell-money fw-semibold" id="tot-neto"></th>
  </tr>
</tfoot>
        </table>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
(function(){
  const tbody = document.getElementById('pt-body');
  if(!tbody) return;

  const rows = Array.from(tbody.querySelectorAll('tr.data-row'));
  const filterBtns = Array.from(document.querySelectorAll('.pt-table thead .pt-filter-btn'));

  // ===== Helpers =====
  const nf = new Intl.NumberFormat('es-CR', { style:'currency', currency:'CRC', maximumFractionDigits:0 });

  function getVal(tr, key){ return tr.getAttribute('data-' + key) ?? ''; }

  // Estado de filtros por columna
  const keys = filterBtns.map(b => b.dataset.key);
  const filterState = {};
  filterBtns.forEach(btn=>{
    const key  = btn.dataset.key;
    const type = btn.dataset.type || 'text';
    filterState[key] = (type === 'num')
      ? { type, min:null, max:null }
      : { type, values:new Set() }; // Set vacío = sin filtro
  });

  // ===== Aplicar filtros + totales + subtotales =====
  function applyFilters(){
    rows.forEach(tr=>{
      let show = true;
      for(const key of keys){
        const st  = filterState[key];
        const raw = getVal(tr, key);
        if(st.type === 'text'){
          if(st.values && st.values.size && !st.values.has(raw)){ show = false; break; }
        }else{
          const num = Number(raw);
          if(st.min!=null && num < st.min){ show = false; break; }
          if(st.max!=null && num > st.max){ show = false; break; }
        }
      }
      tr.style.display = show ? '' : 'none';
    });

    // Estado visual del embudo
    filterBtns.forEach(btn=>{
      const st = filterState[btn.dataset.key];
      const active = (st.type==='text') ? (st.values && st.values.size>0) : (st.min!=null || st.max!=null);
      btn.classList.toggle('active', !!active);
    });

    updateTotals();
    rebuildSubtotals();
    reinitPopovers();
  }

  function updateTotals(){
    const acc = { mensual:0, quin:0, extras:0, bruto:0, deds:0, neto:0 };
    let vis = 0;
    rows.forEach(tr=>{
      if(tr.style.display==='none') return;
      vis++;
      for(const k in acc){ acc[k] += +getVal(tr,k) || 0; }
    });
    const map = { mensual:'tot-mensual', quin:'tot-quin', extras:'tot-extras', bruto:'tot-bruto', deds:'tot-deds', neto:'tot-neto' };
    Object.entries(map).forEach(([k,id])=>{
      const el = document.getElementById(id);
      if(el) el.textContent = vis ? nf.format(Math.round(acc[k])) : '—';
    });
  }

  function rebuildSubtotals(){
    // quitar subtotales anteriores
    tbody.querySelectorAll('tr.subtotal-row').forEach(el=>el.remove());

    // agrupar por sector SOLO filas visibles (en orden actual)
    const groups = new Map(); // sector -> sums + lastRow
    rows.forEach(tr=>{
      if(tr.style.display==='none') return;
      const sec = getVal(tr, 'sector') || '';
      if(!groups.has(sec)){
        groups.set(sec, { mensual:0, quin:0, extras:0, bruto:0, deds:0, neto:0, lastRow:tr });
      }
      const g = groups.get(sec);
      g.lastRow = tr;
      g.mensual += +getVal(tr,'mensual') || 0;
      g.quin    += +getVal(tr,'quin')    || 0;
      g.extras  += +getVal(tr,'extras')  || 0;
      g.bruto   += +getVal(tr,'bruto')   || 0;
      g.deds    += +getVal(tr,'deds')    || 0;
      g.neto    += +getVal(tr,'neto')    || 0;
    });

    // insertar filas de subtotal después del último registro visible del sector
    groups.forEach((g,sec)=>{
      const tr = document.createElement('tr');
      tr.className = 'subtotal-row';
      tr.innerHTML =
        '<td colspan="4" class="subtotal-label">Subtotal — ' + sec + '</td>' +
        '<td class="pt-cell-money">' + nf.format(Math.round(g.mensual)) + '</td>' +
        '<td class="pt-cell-money">' + nf.format(Math.round(g.quin)) + '</td>' +
        '<td class="pt-cell-money">' + nf.format(Math.round(g.extras)) + '</td>' +
        '<td class="pt-cell-money">' + nf.format(Math.round(g.bruto)) + '</td>' +
        '<td class="pt-cell-money">' + nf.format(Math.round(g.deds)) + '</td>' +
        '<td class="pt-cell-money fw-semibold">' + nf.format(Math.round(g.neto)) + '</td>';
      g.lastRow.insertAdjacentElement('afterend', tr);
    });
  }

  // ===== Popovers (Extras / Deducciones) =====
  let popoversInitOnce = false;
  function reinitPopovers(){
    try{
      document.querySelectorAll('[data-bs-toggle="popover"]').forEach(el=>{
        const p = bootstrap.Popover.getInstance(el); if(p) p.dispose();
      });
    }catch(e){}
    document.querySelectorAll('.pop-extras, .pop-deds').forEach(a=>{
      const id  = a.getAttribute('data-content-id');
      const src = id ? document.getElementById(id) : null;
      if(!src) return;
      a.setAttribute('data-bs-toggle','popover');
      a.setAttribute('data-bs-placement','top');
      try{
        new bootstrap.Popover(a, {
          html:true, trigger:'click', sanitize:false,
          content: () => src.innerHTML
        });
        a.addEventListener('shown.bs.popover', () => {
          document.querySelectorAll('.pop-extras, .pop-deds').forEach(o=>{
            if(o!==a){ bootstrap.Popover.getInstance(o)?.hide(); }
          });
        });
      }catch(e){}
    });
    if(!popoversInitOnce){
      document.addEventListener('click', (ev)=>{
        if(!ev.target.closest('.popover') && !ev.target.closest('.pop-extras') && !ev.target.closest('.pop-deds')){
          document.querySelectorAll('.pop-extras, .pop-deds').forEach(a=>bootstrap.Popover.getInstance(a)?.hide());
        }
      });
      popoversInitOnce = true;
    }
  }

  // ===== Menú de filtros tipo Excel =====
  let openForKey = null;
  const menu = document.createElement('div');
  menu.id = 'pt-filter-menu';
  menu.className = 'pt-filter-menu shadow';
  document.body.appendChild(menu);

  function uniqueValuesFor(key){
    const set = new Set();
    rows.forEach(tr => set.add(getVal(tr, key)));
    return Array.from(set).sort((a,b)=>a.localeCompare(b,'es',{sensitivity:'base'}));
  }

  function positionMenu(btn){
    const r = btn.getBoundingClientRect();
    const top  = window.scrollY + r.bottom + 6;
    const left = Math.min(window.scrollX + r.left, window.scrollX + window.innerWidth - menu.offsetWidth - 12);
    menu.style.top  = top + 'px';
    menu.style.left = left + 'px';
  }

  function hideMenu(){ menu.style.display='none'; openForKey=null; }
  function outsideOnce(ev){ if(!ev.target.closest('#pt-filter-menu')) hideMenu(); }

  function showMenuFor(btn){
    const key  = btn.dataset.key;
    const type = btn.dataset.type || 'text';
    openForKey = key;

    if(type==='text'){
      const opts = uniqueValuesFor(key);
      const current = filterState[key].values;
      let list = '';
      opts.forEach((v,i)=>{
        const id = `fm-${key}-${i}`;
        const chk = (!current || current.size===0 || current.has(v)) ? 'checked' : '';
        const label = v || '(vacío)';
        list += `<div class="form-check">
          <input class="form-check-input" type="checkbox" id="${id}" value="${String(v).replace(/"/g,'&quot;')}" ${chk}>
          <label class="form-check-label" for="${id}">${label}</label>
        </div>`;
      });
      menu.innerHTML = `
        <div class="fm-head">
          <input type="text" class="form-control form-control-sm" placeholder="Buscar…">
          <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" id="fm-all" checked>
            <label class="form-check-label small" for="fm-all">Seleccionar todo</label>
          </div>
        </div>
        <div class="fm-list">${list}</div>
        <div class="fm-actions">
          <button type="button" class="btn btn-sm btn-light" id="fm-clear">Limpiar</button>
          <button type="button" class="btn btn-sm btn-primary" id="fm-apply">Aplicar</button>
        </div>`;

      const search = menu.querySelector('input[placeholder^="Buscar"]');
      const master = menu.querySelector('#fm-all');
      const checks = Array.from(menu.querySelectorAll('.fm-list input[type="checkbox"]'));

      function syncMaster(){
        const vis = checks.filter(c => c.closest('.form-check').style.display!=='none');
        master.checked = vis.every(c=>c.checked);
      }
      search.addEventListener('input', ()=>{
        const q = search.value.trim().toLowerCase();
        checks.forEach(c=>{
          const lbl = c.nextElementSibling.textContent.toLowerCase();
          c.closest('.form-check').style.display = (q==='' || lbl.includes(q)) ? '' : 'none';
        });
        syncMaster();
      });
      master.addEventListener('change', ()=>{ checks.forEach(c=>{
        if(c.closest('.form-check').style.display!=='none') c.checked = master.checked;
      }); });
      menu.querySelector('#fm-clear').addEventListener('click', ()=>{ checks.forEach(c=>c.checked=false); });
      menu.querySelector('#fm-apply').addEventListener('click', ()=>{
        const selected = new Set(checks.filter(c=>c.checked).map(c=>c.value));
        if(selected.size===checks.length || selected.size===0) filterState[key].values = new Set(); // sin filtro
        else filterState[key].values = selected;
        applyFilters(); hideMenu();
      });
    }else{
      const st = filterState[key];
      const minStr = (st.min!=null) ? st.min : '';
      const maxStr = (st.max!=null) ? st.max : '';
      menu.innerHTML = `
        <div class="fm-head"><div class="small text-muted">Rango numérico</div></div>
        <div class="p-2">
          <div class="row g-2">
            <div class="col">
              <label class="form-label form-label-sm">Mín</label>
              <input type="number" step="1" class="form-control form-control-sm" id="fm-min" value="${minStr}">
            </div>
            <div class="col">
              <label class="form-label form-label-sm">Máx</label>
              <input type="number" step="1" class="form-control form-control-sm" id="fm-max" value="${maxStr}">
            </div>
          </div>
        </div>
        <div class="fm-actions">
          <button type="button" class="btn btn-sm btn-light" id="fm-clear">Limpiar</button>
          <button type="button" class="btn btn-sm btn-primary" id="fm-apply">Aplicar</button>
        </div>`;
      menu.querySelector('#fm-clear').addEventListener('click', ()=>{
        filterState[key].min=null; filterState[key].max=null; applyFilters(); hideMenu();
      });
      menu.querySelector('#fm-apply').addEventListener('click', ()=>{
        const min = menu.querySelector('#fm-min').value;
        const max = menu.querySelector('#fm-max').value;
        filterState[key].min = (min==='') ? null : Number(min);
        filterState[key].max = (max==='') ? null : Number(max);
        applyFilters(); hideMenu();
      });
    }

    positionMenu(btn);
    menu.style.display = 'block';
    setTimeout(()=>document.addEventListener('click', outsideOnce, { once:true }),0);
  }

  // Abrir menú desde cada embudo
  filterBtns.forEach(btn=>{
    btn.addEventListener('click', (ev)=>{
      ev.stopPropagation();
      if(openForKey===btn.dataset.key && menu.style.display==='block'){ hideMenu(); return; }
      showMenuFor(btn);
    });
  });

  // Init
  reinitPopovers();
  applyFilters();
})();
</script>
}





