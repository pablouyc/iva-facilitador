@page
@model IvaFacilitador.Areas.Payroll.Pages.PlanillaTotal.IndexModel
@{
    ViewData["Title"] = "Planilla total";
    ViewData["PayrollSection"] = "Planilla total";
}
@await Html.PartialAsync("~/Areas/Payroll/Components/_Topbar.cshtml")


@section Styles {
  <style>
    :root{
      --pt-ink:#232d32; --pt-brand:#0b5c6b;
      --pt-border:#e7ebee; --pt-border-strong:#d6dde2;
      --pt-row:#fbfcfd; --pt-hover:#f2f6f8;
      --pt-chip-extra-bg:#ecf8ff; --pt-chip-extra-fg:#0b5c6b;
      --pt-chip-ded-bg:#fff1f3;  --pt-chip-ded-fg:#b4232c;
    }

    /* contenedor */
    .pt-wrap { position: relative; }

    /* tarjeta */
    .pt-wrap > .card{
      border: 1px solid var(--pt-border);
      border-radius: 14px;
      box-shadow: 0 6px 22px rgba(2,52,63,.08);
    }
    .pt-wrap > .card .card-body{ padding: 1rem 1rem 1.25rem; }

    /* meta (periodo, empresa) */
    .pt-meta{ display:flex; gap:.75rem; align-items:center; margin-bottom:.75rem; }
    .badge-mono{
      background:#fff; border:1px solid var(--pt-border);
      color:var(--pt-ink); font-weight:500; padding:.4rem .55rem; border-radius:999px;
    }

    /* tabla */
    .pt-table-wrap{ overflow:auto; }
    .pt-table{ border-collapse: separate; border-spacing:0; width:100%; }
    .pt-table thead th{
      position: sticky; top:0; z-index:2;
      background: linear-gradient(180deg, rgba(2,52,63,.045), #fff 60%);
      color: var(--pt-brand);
      font-weight:700; letter-spacing:.15px;
      border-bottom:1px solid var(--pt-border-strong);
      backdrop-filter:saturate(1.2);
    }
    .pt-table th, .pt-table td{ white-space:nowrap; border-top:1px solid var(--pt-border); }
    .pt-table tbody tr:nth-child(even){ background: var(--pt-row); }
    .pt-table tbody tr:hover{
      background: var(--pt-hover);
      box-shadow: inset 0 1px 0 rgba(2,52,63,.06), inset 0 -1px 0 rgba(2,52,63,.06);
    }

    /* líneas verticales entre columnas */
    .pt-table thead th + th,
    .pt-table tbody td + td{ box-shadow: inset 1px 0 0 var(--pt-border); }

    /* números alineados */
    .pt-cell-money{ text-align:right; font-variant-numeric: tabular-nums; }
    .pt-cell-money.fw-semibold{ color:#0b5c6b; } /* neto */

    /* chips enlaces */
    .pt-table .pop-extras, .pt-table .pop-deds{
      display:inline-block; padding:.15rem .45rem; border-radius:999px;
      text-decoration:none!important; line-height:1.25; border:1px solid transparent;
    }
    .pt-table .pop-extras{ background:var(--pt-chip-extra-bg); color:var(--pt-chip-extra-fg); border-color:rgba(2,52,63,.12); }
    .pt-table .pop-deds  { background:var(--pt-chip-ded-bg);  color:var(--pt-chip-ded-fg);  border-color:rgba(220,53,69,.18); }
    .pt-table .pop-extras:focus, .pt-table .pop-deds:focus{ outline:0; box-shadow:0 0 0 .2rem rgba(2,52,63,.12); }

    /* popovers */
    .popover{ border:1px solid var(--pt-border); box-shadow:0 14px 30px rgba(2,52,63,.18); border-radius:10px; }
    .popover .popover-body{ font-size:.875rem; color:var(--pt-ink); }
  
    /* filtros de cabecera */
    .pt-filter-row th { background:#fff; position:sticky; top:40px; z-index:1; }
    .pt-filter-row input[type="text"]{ width:16ch; }
    .pt-filter-row .nbox{ display:flex; gap:.25rem; align-items:center; }
    .pt-filter-row .nbox input{ width:8ch; }

    /* tfoot sticky */
    .pt-table tfoot.pt-sticky { position: sticky; bottom: 0; background:#fff; }
    .pt-table tfoot.pt-sticky th, .pt-table tfoot.pt-sticky td{
      background:#fff; border-top:2px solid var(--pt-border-strong);
      box-shadow: 0 -4px 10px rgba(2,52,63,.06);
    }

    /* fila subtotal por sector */
    .subtotal-row{ background: var(--pt-row); font-weight:600; }
    .subtotal-label{ text-align:right; color:#0b5c6b; }

    /* filtros tipo Excel */
    .pt-filter-btn{ border:0; background:transparent; padding:0; margin-left:.35rem; opacity:.6; vertical-align:middle; }
    .pt-filter-btn:hover{ opacity:1; }
    .pt-filter-btn .pt-filter-ic{ display:inline-block; fill:#6c757d; }
    .pt-filter-btn.active .pt-filter-ic{ fill: var(--pt-brand); opacity:1; }
    .pt-filter-menu{
      position:absolute; z-index:1055; width:260px; background:#fff;
      border:1px solid var(--pt-border); border-radius:.5rem;
      box-shadow:0 12px 28px rgba(2,52,63,.18); padding:.5rem; display:none;
    }
    .pt-filter-menu .hdr{ display:flex; gap:.5rem; align-items:center; padding:.25rem .25rem .5rem; border-bottom:1px solid var(--pt-border); margin-bottom:.5rem; }
    .pt-filter-menu .hdr input[type="text"]{ flex:1; }
    .pt-filter-menu .list{ max-height:220px; overflow:auto; padding:.25rem; }
    .pt-filter-menu .list .opt{ display:flex; align-items:center; gap:.5rem; padding:.15rem .25rem; border-radius:.25rem; }
    .pt-filter-menu .list .opt:hover{ background:#f8f9fa; }
    .pt-filter-menu .foot{ display:flex; justify-content:flex-end; gap:.5rem; margin-top:.5rem; }
    /* blindaje: mantener ocultos los divs de popover */
    .pt-table .d-none{ display:none !important; }

    /* filtro tipo Excel */
    .pt-filter-btn{
      border:0; background:transparent; padding:0 .25rem; line-height:1;
      opacity:.6; cursor:pointer; font-weight:600;
    }
    .pt-filter-btn:hover{ opacity:1; }
    .pt-filter-btn.active{ color:var(--pt-brand); opacity:1; }

    .pt-filter-menu{
      position:fixed; top:0; left:0; width:260px; max-height:60vh; overflow:auto;
      background:#fff; border:1px solid var(--pt-border-strong); border-radius:10px;
      box-shadow:0 18px 40px rgba(2,52,63,.16); z-index: 1200;
    }
    .pt-filter-menu .fm-head{ padding:.5rem .5rem .25rem; border-bottom:1px solid var(--pt-border); }
    .pt-filter-menu .fm-list{ max-height:40vh; overflow:auto; padding:.25rem .5rem; }
    .pt-filter-menu .fm-actions{ display:flex; gap:.5rem; justify-content:flex-end; padding:.5rem; border-top:1px solid var(--pt-border); }
    .pt-filter-menu .form-check{ margin:.15rem 0; }
  /* pt-compact-cells */
  .pt-table th, .pt-table td{ padding:.35rem .5rem; }
  .pt-table thead th .pt-filter-btn{ margin-left:.25rem; }
</style>
}
<div class="pt-wrap">
  <div class="pt-meta">
    <span class="badge badge-mono">Periodo: @Model.PeriodoLabel</span>
    @if (!string.IsNullOrWhiteSpace(Model.companyId))
    {
        <span class="badge badge-mono">Empresa: @Model.companyId</span>
    }
  </div>

  <div class="card payroll-card">
    <div class="card-body">
      <div class="pt-table-wrap">
        <table class="table table-sm table-hover align-middle pt-table">
          <thead>
  <tr>
    <th>Colaborador <button type=""button"" class=""pt-filter-btn"" data-col=""colaborador"" title=""Filtro"">▾</button></th>
    <th>Identificación <button type=""button"" class=""pt-filter-btn"" data-col=""identificacion"" title=""Filtro"">▾</button></th>
    <th>Cargo <button type=""button"" class=""pt-filter-btn"" data-col=""cargo"" title=""Filtro"">▾</button></th>
    <th>Sector <button type=""button"" class=""pt-filter-btn"" data-col=""sector"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Salario mensual <button type=""button"" class=""pt-filter-btn"" data-col=""mensual"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Salario quincena <button type=""button"" class=""pt-filter-btn"" data-col=""quin"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Extras <button type=""button"" class=""pt-filter-btn"" data-col=""extras"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Salario bruto <button type=""button"" class=""pt-filter-btn"" data-col=""bruto"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Deducciones <button type=""button"" class=""pt-filter-btn"" data-col=""deds"" title=""Filtro"">▾</button></th>
    <th class=""text-end"">Neto a recibir <button type=""button"" class=""pt-filter-btn"" data-col=""neto"" title=""Filtro"">▾</button></th>
  </tr>
</thead>
          <tbody id="pt-body">
@for (var i = 0; i < Model.Rows.Count; i++)
{
    var r = Model.Rows[i];
    <tr class="data-row"
        data-colaborador="@r.Colaborador"
        data-identificacion="@r.Identificacion"
        data-cargo="@r.Cargo"
        data-sector="@r.Sector"
        data-mensual="@(r.SalarioMensual.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-quin="@(r.SalarioQuincena.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-extras="@(r.Extras.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-bruto="@(r.Bruto.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-deds="@(r.Deducciones.ToString(System.Globalization.CultureInfo.InvariantCulture))"
        data-neto="@(r.Neto.ToString(System.Globalization.CultureInfo.InvariantCulture))">
      <td>@r.Colaborador</td>
      <td>@r.Identificacion</td>
      <td>@r.Cargo</td>
      <td>@r.Sector</td>
      <td class="pt-cell-money">@Model.Money(r.SalarioMensual)</td>
      <td class="pt-cell-money">@Model.Money(r.SalarioQuincena)</td>
      <td class="pt-cell-money">
        <a href="javascript:void(0)" class="link-dark text-decoration-none pop-extras" data-content-id="ex-@i">
          @Model.Money(r.Extras)
        </a>
        <div id="ex-@i" class="d-none">
          <div class="small">
            @foreach (var it in r.ExtrasDetalle)
            {
              <div>@it.Name: <strong>@Model.Money(it.Amount)</strong></div>
            }
            @if (r.ExtrasDetalle.Count == 0)
            {
              <div class="text-muted fst-italic">Sin extras</div>
            }
          </div>
        </div>
      </td>
      <td class="pt-cell-money">@Model.Money(r.Bruto)</td>
      <td class="pt-cell-money">
        <a href="javascript:void(0)" class="link-dark text-decoration-none pop-deds" data-content-id="dd-@i">
          @Model.Money(r.Deducciones)
        </a>
        <div id="dd-@i" class="d-none">
          <div class="small">
            @foreach (var it in r.DeduccionesDetalle)
            {
              <div>@it.Name: <strong>@Model.Money(it.Amount)</strong></div>
            }
            @if (r.DeduccionesDetalle.Count == 0)
            {
              <div class="text-muted fst-italic">Sin deducciones</div>
            }
          </div>
        </div>
      </td>
      <td class="pt-cell-money fw-semibold">@Model.Money(r.Neto)</td>
    </tr>
}
</tbody>
<tfoot class="pt-sticky">
  <tr>
    <th colspan="4" class="subtotal-label">Totales visibles</th>
    <th class="pt-cell-money" id="tot-mensual"></th>
    <th class="pt-cell-money" id="tot-quin"></th>
    <th class="pt-cell-money" id="tot-extras"></th>
    <th class="pt-cell-money" id="tot-bruto"></th>
    <th class="pt-cell-money" id="tot-deds"></th>
    <th class="pt-cell-money fw-semibold" id="tot-neto"></th>
  </tr>
</tfoot>
        </table>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    (function(){
      if (!window.bootstrap) return;
      function initPop(cls){
        document.querySelectorAll(cls).forEach(function(el){
          var id = el.getAttribute("data-content-id");
          var html = document.getElementById(id)?.innerHTML || "";
          var pop = bootstrap.Popover.getInstance(el);
          if (pop) pop.dispose();
          new bootstrap.Popover(el, { html: true, content: html, placement: "top", trigger: "hover focus" });
        });
      }
      initPop(".pop-extras");
      initPop(".pop-deds");
      document.addEventListener("ivapayroll:reinit-popovers", function(){ initPop(".pop-extras"); initPop(".pop-deds"); });
    })();
  </script>

  <script>
    (function(){
      function moneyCR(n){ try { return n.toLocaleString("es-CR",{style:"currency",currency:"CRC",maximumFractionDigits:0}); } catch { return (Math.round(n)).toString(); } }
      var tbody = document.getElementById("pt-body"); if(!tbody) return;

      var cols = [
        {key:"colaborador", type:"text"},
        {key:"identificacion", type:"text"},
        {key:"cargo", type:"text"},
        {key:"sector", type:"text"},
        {key:"mensual", type:"num"},
        {key:"quin", type:"num"},
        {key:"extras", type:"num"},
        {key:"bruto", type:"num"},
        {key:"deds", type:"num"},
        {key:"neto", type:"num"}
      ];

      function visibleRows(){ return Array.from(tbody.querySelectorAll("tr.data-row")).filter(function(tr){ return !tr.classList.contains("d-none"); }); }
      function updateTotals(){
        var ids = ["mensual","quin","extras","bruto","deds","neto"];
        var sums = {mensual:0, quin:0, extras:0, bruto:0, deds:0, neto:0};
        visibleRows().forEach(function(tr){ ids.forEach(function(k){ var v=parseFloat(tr.dataset[k]||"0"); if(!isNaN(v)) sums[k]+=v; }); });
        document.getElementById("tot-mensual").textContent = moneyCR(sums.mensual);
        document.getElementById("tot-quin").textContent    = moneyCR(sums.quin);
        document.getElementById("tot-extras").textContent  = moneyCR(sums.extras);
        document.getElementById("tot-bruto").textContent   = moneyCR(sums.bruto);
        document.getElementById("tot-deds").textContent    = moneyCR(sums.deds);
        document.getElementById("tot-neto").textContent    = moneyCR(sums.neto);
      }
      function rebuildSubtotals(){
        Array.from(tbody.querySelectorAll("tr.subtotal-row")).forEach(function(tr){ tr.remove(); });
        var groups = new Map();
        visibleRows().forEach(function(tr){
          var sec = tr.dataset.sector || "";
          if(!groups.has(sec)) groups.set(sec, {rows:[], sums:{mensual:0, quin:0, extras:0, bruto:0, deds:0, neto:0}});
          var g = groups.get(sec);
          g.rows.push(tr);
          ["mensual","quin","extras","bruto","deds","neto"].forEach(function(k){ var v=parseFloat(tr.dataset[k]||"0"); if(!isNaN(v)) g.sums[k]+=v; });
        });
        groups.forEach(function(g,sec){
          if (g.rows.length===0) return;
          var last = g.rows[g.rows.length-1];
          var tr = document.createElement("tr");
          tr.className = "subtotal-row";
          tr.innerHTML = ""
            + "<td colspan=\"4\" class=\"subtotal-label\">Subtotal — " + (sec||"—") + "</td>"
            + "<td class=\"pt-cell-money\">"+moneyCR(g.sums.mensual)+"</td>"
            + "<td class=\"pt-cell-money\">"+moneyCR(g.sums.quin)+"</td>"
            + "<td class=\"pt-cell-money\">"+moneyCR(g.sums.extras)+"</td>"
            + "<td class=\"pt-cell-money\">"+moneyCR(g.sums.bruto)+"</td>"
            + "<td class=\"pt-cell-money\">"+moneyCR(g.sums.deds)+"</td>"
            + "<td class=\"pt-cell-money fw-semibold\">"+moneyCR(g.sums.neto)+"</td>";
          last.parentNode.insertBefore(tr, last.nextSibling);
        });
      }

      // === Filtros tipo Excel === (UI movida al script final)
      // Exponer helpers para que el otro script pueda recalcular totales/subtotales
      window.ivapayroll = Object.assign(window.ivapayroll||{}, { rebuildSubtotals, updateTotals });

        // init
      rebuildSubtotals();
      updateTotals();
    })();
  </script>

  <script>
  (function(){
    var tbody = document.getElementById('pt-body'); if(!tbody) return;

    var NUM_KEYS = ['mensual','quin','extras','bruto','deds','neto'];
    function moneyCR(n){ try { return n.toLocaleString('es-CR',{style:'currency',currency:'CRC',maximumFractionDigits:0}); } catch { return (Math.round(n)||0).toString(); } }

    // Estado: Set por columna (null = sin filtro / todo seleccionado)
    var state = { colaborador:null, identificacion:null, cargo:null, sector:null, mensual:null, quin:null, extras:null, bruto:null, deds:null, neto:null };

    function rowVal(tr, key){
      var v = tr.dataset[key] || '';
      return NUM_KEYS.indexOf(key)>=0 ? String(parseFloat(v||'0')) : v;
    }

    function applyState(){
      var rows = Array.from(tbody.querySelectorAll('tr.data-row'));
      rows.forEach(function(tr){
        var ok = true;
        for (var k in state){
          var set = state[k];
          if (!set) continue;
          if (!set.has(rowVal(tr,k))) { ok=false; break; }
        }
        tr.classList.toggle('d-none', !ok);
      });
      // Subtotales y totales ya existen en tu script
      try { window.ivapayroll.rebuildSubtotals(); } catch(e){}
      try { window.ivapayroll.updateTotals(); } catch(e){}
      document.dispatchEvent(new CustomEvent('ivapayroll:reinit-popovers'));
    }

    function rowsMatchingExcept(exceptKey){
      return Array.from(tbody.querySelectorAll('tr.data-row')).filter(function(tr){
        if (tr.classList.contains('d-none')) return false; // respeta lo ya aplicado
        for (var k in state){
          if (k===exceptKey) continue;
          var set = state[k];
          if (!set) continue;
          if (!set.has(rowVal(tr,k))) return false;
        }
        return true;
      });
    }

    function openMenu(btn, key, isNumeric){
      // Construir opciones únicas respetando los demás filtros
      var base = rowsMatchingExcept(key);
      var map = new Map();
      base.forEach(function(tr){
        var raw = tr.dataset[key] || '';
        var sval = isNumeric ? String(parseFloat(raw||'0')) : raw;
        var label = isNumeric ? moneyCR(parseFloat(raw||'0')) : (raw||'—');
        map.set(sval, label);
      });
      var items = Array.from(map.entries()).map(function([v,l]){ return {v:v,l:l,isNum:isNumeric ? 1:0}; });
      items.sort(function(a,b){ return a.isNum ? (parseFloat(a.v)-parseFloat(b.v)) : a.l.localeCompare(b.l,'es'); });

      // Panel
      var menu = document.createElement('div');
      menu.className = 'pt-filter-menu';
      menu.innerHTML = ''
        + '<div class="fm-head">'
        + '  <input type="text" class="form-control form-control-sm" placeholder="Buscar..." id="fm-search">'
        + '  <div class="form-check mt-2">'
        + '    <input class="form-check-input" type="checkbox" id="fm-all" checked>'
        + '    <label class="form-check-label small" for="fm-all">Seleccionar todo</label>'
        + '  </div>'
        + '</div>'
        + '<div class="fm-list" id="fm-list"></div>'
        + '<div class="fm-actions">'
        + '  <button type="button" class="btn btn-sm btn-secondary" id="fm-clear">Limpiar</button>'
        + '  <button type="button" class="btn btn-sm btn-primary" id="fm-ok">Aplicar</button>'
        + '</div>';
      document.body.appendChild(menu);

      // Posición (evita cortes porque es fixed en body)
      var r = btn.getBoundingClientRect();
      menu.style.top  = (r.bottom + 6) + 'px';
      var w = 260, vw = document.documentElement.clientWidth;
      var left = (r.left + w > vw) ? Math.max(8, vw - w - 8) : r.left;
      menu.style.left = left + 'px';

      // Items
      var listEl = menu.querySelector('#fm-list');
      var selected = state[key]; // Set o null
      items.forEach(function(it, idx){
        var id = 'fmi-' + key + '-' + idx;
        var on = !selected || selected.has(it.v);
        var div = document.createElement('div');
        div.className = 'form-check';
        div.innerHTML = '<input class="form-check-input" type="checkbox" id="'+id+'" data-value="'+it.v+'" '+(on?'checked':'')+'>'
                      + '<label class="form-check-label small" for="'+id+'">'+it.l+'</label>';
        listEl.appendChild(div);
      });

      function syncAll(){
        var inputs = listEl.querySelectorAll('input[type="checkbox"]');
        var total = inputs.length, marked = Array.from(inputs).filter(function(i){return i.checked;}).length;
        var all = menu.querySelector('#fm-all');
        all.indeterminate = (marked>0 && marked<total);
        all.checked = (marked===total);
      }
      syncAll();

      // Buscar
      menu.querySelector('#fm-search').addEventListener('input', function(){
        var q = this.value.trim().toLowerCase();
        listEl.querySelectorAll('.form-check').forEach(function(div){
          var t = div.querySelector('label').textContent.toLowerCase();
          div.style.display = (t.indexOf(q)>=0) ? '' : 'none';
        });
      });

      // All
      menu.querySelector('#fm-all').addEventListener('change', function(){
        var on = this.checked;
        listEl.querySelectorAll('input[type="checkbox"]').forEach(function(i){ i.checked = on; });
        syncAll();
      });
      listEl.addEventListener('change', syncAll);

      // Acciones
      menu.querySelector('#fm-clear').addEventListener('click', function(){
        state[key] = null; btn.classList.remove('active'); applyState(); close();
      });
      menu.querySelector('#fm-ok').addEventListener('click', function(){
        var chosen = new Set();
        listEl.querySelectorAll('input[type="checkbox"]').forEach(function(i){ if(i.checked) chosen.add(String(i.dataset.value)); });
        if (chosen.size === items.length || chosen.size===0) { state[key] = null; btn.classList.remove('active'); }
        else { state[key] = chosen; btn.classList.add('active'); }
        applyState(); close();
      });

      function close(){ try{ document.removeEventListener('click', onDoc,true); window.removeEventListener('resize', close); window.removeEventListener('scroll', close,true); }catch(e){}; menu.remove(); }
      function onDoc(e){ if (!menu.contains(e.target) && e.target!==btn) close(); }
      setTimeout(function(){ document.addEventListener('click', onDoc, true); }, 0);
      window.addEventListener('resize', close);
      window.addEventListener('scroll', close, true);
    }

    // Inicializar botones
    document.querySelectorAll('.pt-filter-btn[data-col]').forEach(function(btn){
      var key = btn.getAttribute('data-col');
      var isNum = NUM_KEYS.indexOf(key)>=0;
      btn.addEventListener('click', function(ev){ ev.stopPropagation(); openMenu(btn, key, isNum); });
    });

    // Primera pasada (sin filtros)
    applyState();
  })();
  </script>
}




